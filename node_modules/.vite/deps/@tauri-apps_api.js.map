{
  "version": 3,
  "sources": ["../../@tauri-apps/api/app.js", "../../@tauri-apps/api/tauri.js", "../../@tauri-apps/api/helpers/tauri.js", "../../@tauri-apps/api/cli.js", "../../@tauri-apps/api/clipboard.js", "../../@tauri-apps/api/dialog.js", "../../@tauri-apps/api/event.js", "../../@tauri-apps/api/helpers/event.js", "../../@tauri-apps/api/fs.js", "../../@tauri-apps/api/globalShortcut.js", "../../@tauri-apps/api/http.js", "../../@tauri-apps/api/notification.js", "../../@tauri-apps/api/path.js", "../../@tauri-apps/api/helpers/os-check.js", "../../@tauri-apps/api/process.js", "../../@tauri-apps/api/shell.js", "../../@tauri-apps/api/updater.js", "../../@tauri-apps/api/window.js", "../../@tauri-apps/api/os.js", "../../@tauri-apps/api/index.js"],
  "sourcesContent": ["import { invokeTauriCommand } from './helpers/tauri.js';\n\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * Get application metadata.\n *\n * This package is also accessible with `window.__TAURI__.app` when [`build.withGlobalTauri`](https://tauri.app/v1/api/config/#buildconfig.withglobaltauri) in `tauri.conf.json` is set to `true`.\n *\n * The APIs must be added to [`tauri.allowlist.app`](https://tauri.app/v1/api/config/#allowlistconfig.app) in `tauri.conf.json`:\n * ```json\n * {\n *   \"tauri\": {\n *     \"allowlist\": {\n *       \"app\": {\n *         \"all\": true, // enable all app APIs\n *         \"show\": true,\n *         \"hide\": true\n *       }\n *     }\n *   }\n * }\n * ```\n * It is recommended to allowlist only the APIs you use for optimal bundle size and security.\n *\n * @module\n */\n/**\n * Gets the application version.\n * @example\n * ```typescript\n * import { getVersion } from '@tauri-apps/api/app';\n * const appVersion = await getVersion();\n * ```\n *\n * @since 1.0.0\n */\nasync function getVersion() {\n    return invokeTauriCommand({\n        __tauriModule: 'App',\n        message: {\n            cmd: 'getAppVersion'\n        }\n    });\n}\n/**\n * Gets the application name.\n * @example\n * ```typescript\n * import { getName } from '@tauri-apps/api/app';\n * const appName = await getName();\n * ```\n *\n * @since 1.0.0\n */\nasync function getName() {\n    return invokeTauriCommand({\n        __tauriModule: 'App',\n        message: {\n            cmd: 'getAppName'\n        }\n    });\n}\n/**\n * Gets the Tauri version.\n *\n * @example\n * ```typescript\n * import { getTauriVersion } from '@tauri-apps/api/app';\n * const tauriVersion = await getTauriVersion();\n * ```\n *\n * @since 1.0.0\n */\nasync function getTauriVersion() {\n    return invokeTauriCommand({\n        __tauriModule: 'App',\n        message: {\n            cmd: 'getTauriVersion'\n        }\n    });\n}\n/**\n * Shows the application on macOS. This function does not automatically focus any specific app window.\n *\n * @example\n * ```typescript\n * import { show } from '@tauri-apps/api/app';\n * await show();\n * ```\n *\n * @since 1.2.0\n */\nasync function show() {\n    return invokeTauriCommand({\n        __tauriModule: 'App',\n        message: {\n            cmd: 'show'\n        }\n    });\n}\n/**\n * Hides the application on macOS.\n *\n * @example\n * ```typescript\n * import { hide } from '@tauri-apps/api/app';\n * await hide();\n * ```\n *\n * @since 1.2.0\n */\nasync function hide() {\n    return invokeTauriCommand({\n        __tauriModule: 'App',\n        message: {\n            cmd: 'hide'\n        }\n    });\n}\n\nexport { getName, getTauriVersion, getVersion, hide, show };\n", "// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/** @ignore */\nfunction uid() {\n    return window.crypto.getRandomValues(new Uint32Array(1))[0];\n}\n/**\n * Transforms a callback function to a string identifier that can be passed to the backend.\n * The backend uses the identifier to `eval()` the callback.\n *\n * @return A unique identifier associated with the callback function.\n *\n * @since 1.0.0\n */\nfunction transformCallback(callback, once = false) {\n    const identifier = uid();\n    const prop = `_${identifier}`;\n    Object.defineProperty(window, prop, {\n        value: (result) => {\n            if (once) {\n                Reflect.deleteProperty(window, prop);\n            }\n            return callback?.(result);\n        },\n        writable: false,\n        configurable: true\n    });\n    return identifier;\n}\n/**\n * Sends a message to the backend.\n * @example\n * ```typescript\n * import { invoke } from '@tauri-apps/api/tauri';\n * await invoke('login', { user: 'tauri', password: 'poiwe3h4r5ip3yrhtew9ty' });\n * ```\n *\n * @param cmd The command name.\n * @param args The optional arguments to pass to the command.\n * @return A promise resolving or rejecting to the backend response.\n *\n * @since 1.0.0\n */\nasync function invoke(cmd, args = {}) {\n    return new Promise((resolve, reject) => {\n        const callback = transformCallback((e) => {\n            resolve(e);\n            Reflect.deleteProperty(window, `_${error}`);\n        }, true);\n        const error = transformCallback((e) => {\n            reject(e);\n            Reflect.deleteProperty(window, `_${callback}`);\n        }, true);\n        window.__TAURI_IPC__({\n            cmd,\n            callback,\n            error,\n            ...args\n        });\n    });\n}\n/**\n * Convert a device file path to an URL that can be loaded by the webview.\n * Note that `asset:` and `https://asset.localhost` must be added to [`tauri.security.csp`](https://tauri.app/v1/api/config/#securityconfig.csp) in `tauri.conf.json`.\n * Example CSP value: `\"csp\": \"default-src 'self'; img-src 'self' asset: https://asset.localhost\"` to use the asset protocol on image sources.\n *\n * Additionally, `asset` must be added to [`tauri.allowlist.protocol`](https://tauri.app/v1/api/config/#allowlistconfig.protocol)\n * in `tauri.conf.json` and its access scope must be defined on the `assetScope` array on the same `protocol` object.\n *\n * @param  filePath The file path.\n * @param  protocol The protocol to use. Defaults to `asset`. You only need to set this when using a custom protocol.\n * @example\n * ```typescript\n * import { appDataDir, join } from '@tauri-apps/api/path';\n * import { convertFileSrc } from '@tauri-apps/api/tauri';\n * const appDataDirPath = await appDataDir();\n * const filePath = await join(appDataDirPath, 'assets/video.mp4');\n * const assetUrl = convertFileSrc(filePath);\n *\n * const video = document.getElementById('my-video');\n * const source = document.createElement('source');\n * source.type = 'video/mp4';\n * source.src = assetUrl;\n * video.appendChild(source);\n * video.load();\n * ```\n *\n * @return the URL that can be used as source on the webview.\n *\n * @since 1.0.0\n */\nfunction convertFileSrc(filePath, protocol = 'asset') {\n    return window.__TAURI__.convertFileSrc(filePath, protocol);\n}\n\nexport { convertFileSrc, invoke, transformCallback };\n", "import { invoke } from '../tauri.js';\n\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/** @ignore */\nasync function invokeTauriCommand(command) {\n    return invoke('tauri', command);\n}\n\nexport { invokeTauriCommand };\n", "import { invokeTauriCommand } from './helpers/tauri.js';\n\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * Parse arguments from your Command Line Interface.\n *\n * This package is also accessible with `window.__TAURI__.cli` when [`build.withGlobalTauri`](https://tauri.app/v1/api/config/#buildconfig.withglobaltauri) in `tauri.conf.json` is set to `true`.\n * @module\n */\n/**\n * Parse the arguments provided to the current process and get the matches using the configuration defined [`tauri.cli`](https://tauri.app/v1/api/config/#tauriconfig.cli) in `tauri.conf.json`\n * @example\n * ```typescript\n * import { getMatches } from '@tauri-apps/api/cli';\n * const matches = await getMatches();\n * if (matches.subcommand?.name === 'run') {\n *   // `./your-app run $ARGS` was executed\n *   const args = matches.subcommand?.matches.args\n *   if ('debug' in args) {\n *     // `./your-app run --debug` was executed\n *   }\n * } else {\n *   const args = matches.args\n *   // `./your-app $ARGS` was executed\n * }\n * ```\n *\n * @since 1.0.0\n */\nasync function getMatches() {\n    return invokeTauriCommand({\n        __tauriModule: 'Cli',\n        message: {\n            cmd: 'cliMatches'\n        }\n    });\n}\n\nexport { getMatches };\n", "import { invokeTauriCommand } from './helpers/tauri.js';\n\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * Read and write to the system clipboard.\n *\n * This package is also accessible with `window.__TAURI__.clipboard` when [`build.withGlobalTauri`](https://tauri.app/v1/api/config/#buildconfig.withglobaltauri) in `tauri.conf.json` is set to `true`.\n *\n * The APIs must be added to [`tauri.allowlist.clipboard`](https://tauri.app/v1/api/config/#allowlistconfig.clipboard) in `tauri.conf.json`:\n * ```json\n * {\n *   \"tauri\": {\n *     \"allowlist\": {\n *       \"clipboard\": {\n *         \"all\": true, // enable all Clipboard APIs\n *         \"writeText\": true,\n *         \"readText\": true\n *       }\n *     }\n *   }\n * }\n * ```\n * It is recommended to allowlist only the APIs you use for optimal bundle size and security.\n *\n * @module\n */\n/**\n * Writes plain text to the clipboard.\n * @example\n * ```typescript\n * import { writeText, readText } from '@tauri-apps/api/clipboard';\n * await writeText('Tauri is awesome!');\n * assert(await readText(), 'Tauri is awesome!');\n * ```\n *\n * @returns A promise indicating the success or failure of the operation.\n *\n * @since 1.0.0.\n */\nasync function writeText(text) {\n    return invokeTauriCommand({\n        __tauriModule: 'Clipboard',\n        message: {\n            cmd: 'writeText',\n            data: text\n        }\n    });\n}\n/**\n * Gets the clipboard content as plain text.\n * @example\n * ```typescript\n * import { readText } from '@tauri-apps/api/clipboard';\n * const clipboardText = await readText();\n * ```\n * @since 1.0.0.\n */\nasync function readText() {\n    return invokeTauriCommand({\n        __tauriModule: 'Clipboard',\n        message: {\n            cmd: 'readText',\n            // if data is not set, `serde` will ignore the custom deserializer\n            // that is set when the API is not allowlisted\n            data: null\n        }\n    });\n}\n\nexport { readText, writeText };\n", "import { invokeTauriCommand } from './helpers/tauri.js';\n\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * Native system dialogs for opening and saving files.\n *\n * This package is also accessible with `window.__TAURI__.dialog` when [`build.withGlobalTauri`](https://tauri.app/v1/api/config/#buildconfig.withglobaltauri) in `tauri.conf.json` is set to `true`.\n *\n * The APIs must be added to [`tauri.allowlist.dialog`](https://tauri.app/v1/api/config/#allowlistconfig.dialog) in `tauri.conf.json`:\n * ```json\n * {\n *   \"tauri\": {\n *     \"allowlist\": {\n *       \"dialog\": {\n *         \"all\": true, // enable all dialog APIs\n *         \"ask\": true, // enable dialog ask API\n *         \"confirm\": true, // enable dialog confirm API\n *         \"message\": true, // enable dialog message API\n *         \"open\": true, // enable file open API\n *         \"save\": true // enable file save API\n *       }\n *     }\n *   }\n * }\n * ```\n * It is recommended to allowlist only the APIs you use for optimal bundle size and security.\n * @module\n */\n/**\n * Open a file/directory selection dialog.\n *\n * The selected paths are added to the filesystem and asset protocol allowlist scopes.\n * When security is more important than the easy of use of this API,\n * prefer writing a dedicated command instead.\n *\n * Note that the allowlist scope change is not persisted, so the values are cleared when the application is restarted.\n * You can save it to the filesystem using [tauri-plugin-persisted-scope](https://github.com/tauri-apps/plugins-workspace/tree/v1/plugins/persisted-scope).\n * @example\n * ```typescript\n * import { open } from '@tauri-apps/api/dialog';\n * // Open a selection dialog for image files\n * const selected = await open({\n *   multiple: true,\n *   filters: [{\n *     name: 'Image',\n *     extensions: ['png', 'jpeg']\n *   }]\n * });\n * if (Array.isArray(selected)) {\n *   // user selected multiple files\n * } else if (selected === null) {\n *   // user cancelled the selection\n * } else {\n *   // user selected a single file\n * }\n * ```\n *\n * @example\n * ```typescript\n * import { open } from '@tauri-apps/api/dialog';\n * import { appDir } from '@tauri-apps/api/path';\n * // Open a selection dialog for directories\n * const selected = await open({\n *   directory: true,\n *   multiple: true,\n *   defaultPath: await appDir(),\n * });\n * if (Array.isArray(selected)) {\n *   // user selected multiple directories\n * } else if (selected === null) {\n *   // user cancelled the selection\n * } else {\n *   // user selected a single directory\n * }\n * ```\n *\n * @returns A promise resolving to the selected path(s)\n *\n * @since 1.0.0\n */\nasync function open(options = {}) {\n    if (typeof options === 'object') {\n        Object.freeze(options);\n    }\n    return invokeTauriCommand({\n        __tauriModule: 'Dialog',\n        message: {\n            cmd: 'openDialog',\n            options\n        }\n    });\n}\n/**\n * Open a file/directory save dialog.\n *\n * The selected path is added to the filesystem and asset protocol allowlist scopes.\n * When security is more important than the easy of use of this API,\n * prefer writing a dedicated command instead.\n *\n * Note that the allowlist scope change is not persisted, so the values are cleared when the application is restarted.\n * You can save it to the filesystem using [tauri-plugin-persisted-scope](https://github.com/tauri-apps/plugins-workspace/tree/v1/plugins/persisted-scope).\n * @example\n * ```typescript\n * import { save } from '@tauri-apps/api/dialog';\n * const filePath = await save({\n *   filters: [{\n *     name: 'Image',\n *     extensions: ['png', 'jpeg']\n *   }]\n * });\n * ```\n *\n * @returns A promise resolving to the selected path.\n *\n * @since 1.0.0\n */\nasync function save(options = {}) {\n    if (typeof options === 'object') {\n        Object.freeze(options);\n    }\n    return invokeTauriCommand({\n        __tauriModule: 'Dialog',\n        message: {\n            cmd: 'saveDialog',\n            options\n        }\n    });\n}\n/**\n * Shows a message dialog with an `Ok` button.\n * @example\n * ```typescript\n * import { message } from '@tauri-apps/api/dialog';\n * await message('Tauri is awesome', 'Tauri');\n * await message('File not found', { title: 'Tauri', type: 'error' });\n * ```\n *\n * @param message The message to show.\n * @param options The dialog's options. If a string, it represents the dialog title.\n *\n * @returns A promise indicating the success or failure of the operation.\n *\n * @since 1.0.0\n *\n */\nasync function message(message, options) {\n    const opts = typeof options === 'string' ? { title: options } : options;\n    return invokeTauriCommand({\n        __tauriModule: 'Dialog',\n        message: {\n            cmd: 'messageDialog',\n            message: message.toString(),\n            title: opts?.title?.toString(),\n            type: opts?.type,\n            buttonLabel: opts?.okLabel?.toString()\n        }\n    });\n}\n/**\n * Shows a question dialog with `Yes` and `No` buttons.\n * @example\n * ```typescript\n * import { ask } from '@tauri-apps/api/dialog';\n * const yes = await ask('Are you sure?', 'Tauri');\n * const yes2 = await ask('This action cannot be reverted. Are you sure?', { title: 'Tauri', type: 'warning' });\n * ```\n *\n * @param message The message to show.\n * @param options The dialog's options. If a string, it represents the dialog title.\n *\n * @returns A promise resolving to a boolean indicating whether `Yes` was clicked or not.\n *\n * @since 1.0.0\n */\nasync function ask(message, options) {\n    const opts = typeof options === 'string' ? { title: options } : options;\n    return invokeTauriCommand({\n        __tauriModule: 'Dialog',\n        message: {\n            cmd: 'askDialog',\n            message: message.toString(),\n            title: opts?.title?.toString(),\n            type: opts?.type,\n            buttonLabels: [\n                opts?.okLabel?.toString() ?? 'Yes',\n                opts?.cancelLabel?.toString() ?? 'No'\n            ]\n        }\n    });\n}\n/**\n * Shows a question dialog with `Ok` and `Cancel` buttons.\n * @example\n * ```typescript\n * import { confirm } from '@tauri-apps/api/dialog';\n * const confirmed = await confirm('Are you sure?', 'Tauri');\n * const confirmed2 = await confirm('This action cannot be reverted. Are you sure?', { title: 'Tauri', type: 'warning' });\n * ```\n *\n * @param message The message to show.\n * @param options The dialog's options. If a string, it represents the dialog title.\n *\n * @returns A promise resolving to a boolean indicating whether `Ok` was clicked or not.\n *\n * @since 1.0.0\n */\nasync function confirm(message, options) {\n    const opts = typeof options === 'string' ? { title: options } : options;\n    return invokeTauriCommand({\n        __tauriModule: 'Dialog',\n        message: {\n            cmd: 'confirmDialog',\n            message: message.toString(),\n            title: opts?.title?.toString(),\n            type: opts?.type,\n            buttonLabels: [\n                opts?.okLabel?.toString() ?? 'Ok',\n                opts?.cancelLabel?.toString() ?? 'Cancel'\n            ]\n        }\n    });\n}\n\nexport { ask, confirm, message, open, save };\n", "import { listen as listen$1, once as once$1, emit as emit$1 } from './helpers/event.js';\n\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * The event system allows you to emit events to the backend and listen to events from it.\n *\n * This package is also accessible with `window.__TAURI__.event` when [`build.withGlobalTauri`](https://tauri.app/v1/api/config/#buildconfig.withglobaltauri) in `tauri.conf.json` is set to `true`.\n * @module\n */\n/**\n * @since 1.1.0\n */\nvar TauriEvent;\n(function (TauriEvent) {\n    TauriEvent[\"WINDOW_RESIZED\"] = \"tauri://resize\";\n    TauriEvent[\"WINDOW_MOVED\"] = \"tauri://move\";\n    TauriEvent[\"WINDOW_CLOSE_REQUESTED\"] = \"tauri://close-requested\";\n    TauriEvent[\"WINDOW_CREATED\"] = \"tauri://window-created\";\n    TauriEvent[\"WINDOW_DESTROYED\"] = \"tauri://destroyed\";\n    TauriEvent[\"WINDOW_FOCUS\"] = \"tauri://focus\";\n    TauriEvent[\"WINDOW_BLUR\"] = \"tauri://blur\";\n    TauriEvent[\"WINDOW_SCALE_FACTOR_CHANGED\"] = \"tauri://scale-change\";\n    TauriEvent[\"WINDOW_THEME_CHANGED\"] = \"tauri://theme-changed\";\n    TauriEvent[\"WINDOW_FILE_DROP\"] = \"tauri://file-drop\";\n    TauriEvent[\"WINDOW_FILE_DROP_HOVER\"] = \"tauri://file-drop-hover\";\n    TauriEvent[\"WINDOW_FILE_DROP_CANCELLED\"] = \"tauri://file-drop-cancelled\";\n    TauriEvent[\"MENU\"] = \"tauri://menu\";\n    TauriEvent[\"CHECK_UPDATE\"] = \"tauri://update\";\n    TauriEvent[\"UPDATE_AVAILABLE\"] = \"tauri://update-available\";\n    TauriEvent[\"INSTALL_UPDATE\"] = \"tauri://update-install\";\n    TauriEvent[\"STATUS_UPDATE\"] = \"tauri://update-status\";\n    TauriEvent[\"DOWNLOAD_PROGRESS\"] = \"tauri://update-download-progress\";\n})(TauriEvent || (TauriEvent = {}));\n/**\n * Listen to an event. The event can be either global or window-specific.\n * See {@link Event.windowLabel} to check the event source.\n *\n * @example\n * ```typescript\n * import { listen } from '@tauri-apps/api/event';\n * const unlisten = await listen<string>('error', (event) => {\n *   console.log(`Got error in window ${event.windowLabel}, payload: ${event.payload}`);\n * });\n *\n * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n * unlisten();\n * ```\n *\n * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n * @param handler Event handler callback.\n * @returns A promise resolving to a function to unlisten to the event.\n * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n *\n * @since 1.0.0\n */\nasync function listen(event, handler) {\n    return listen$1(event, null, handler);\n}\n/**\n * Listen to an one-off event. See {@link listen} for more information.\n *\n * @example\n * ```typescript\n * import { once } from '@tauri-apps/api/event';\n * interface LoadedPayload {\n *   loggedIn: boolean,\n *   token: string\n * }\n * const unlisten = await once<LoadedPayload>('loaded', (event) => {\n *   console.log(`App is loaded, loggedIn: ${event.payload.loggedIn}, token: ${event.payload.token}`);\n * });\n *\n * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n * unlisten();\n * ```\n *\n * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n * @returns A promise resolving to a function to unlisten to the event.\n * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n *\n * @since 1.0.0\n */\nasync function once(event, handler) {\n    return once$1(event, null, handler);\n}\n/**\n * Emits an event to the backend and all Tauri windows.\n * @example\n * ```typescript\n * import { emit } from '@tauri-apps/api/event';\n * await emit('frontend-loaded', { loggedIn: true, token: 'authToken' });\n * ```\n *\n * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n *\n * @since 1.0.0\n */\nasync function emit(event, payload) {\n    return emit$1(event, undefined, payload);\n}\n\nexport { TauriEvent, emit, listen, once };\n", "import { invokeTauriCommand } from './tauri.js';\nimport { transformCallback } from '../tauri.js';\n\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * Unregister the event listener associated with the given name and id.\n *\n * @ignore\n * @param event The event name\n * @param eventId Event identifier\n * @returns\n */\nasync function _unlisten(event, eventId) {\n    return invokeTauriCommand({\n        __tauriModule: 'Event',\n        message: {\n            cmd: 'unlisten',\n            event,\n            eventId\n        }\n    });\n}\n/**\n * Emits an event to the backend.\n *\n * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n * @param [windowLabel] The label of the window to which the event is sent, if null/undefined the event will be sent to all windows\n * @param [payload] Event payload\n * @returns\n */\nasync function emit(event, windowLabel, payload) {\n    await invokeTauriCommand({\n        __tauriModule: 'Event',\n        message: {\n            cmd: 'emit',\n            event,\n            windowLabel,\n            payload\n        }\n    });\n}\n/**\n * Listen to an event from the backend.\n *\n * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n * @param handler Event handler callback.\n * @return A promise resolving to a function to unlisten to the event.\n */\nasync function listen(event, windowLabel, handler) {\n    return invokeTauriCommand({\n        __tauriModule: 'Event',\n        message: {\n            cmd: 'listen',\n            event,\n            windowLabel,\n            handler: transformCallback(handler)\n        }\n    }).then((eventId) => {\n        return async () => _unlisten(event, eventId);\n    });\n}\n/**\n * Listen to an one-off event from the backend.\n *\n * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n * @param handler Event handler callback.\n * @returns A promise resolving to a function to unlisten to the event.\n */\nasync function once(event, windowLabel, handler) {\n    return listen(event, windowLabel, (eventData) => {\n        handler(eventData);\n        _unlisten(event, eventData.id).catch(() => { });\n    });\n}\n\nexport { emit, listen, once };\n", "import { invokeTauriCommand } from './helpers/tauri.js';\n\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * Access the file system.\n *\n * This package is also accessible with `window.__TAURI__.fs` when [`build.withGlobalTauri`](https://tauri.app/v1/api/config/#buildconfig.withglobaltauri) in `tauri.conf.json` is set to `true`.\n *\n * The APIs must be added to [`tauri.allowlist.fs`](https://tauri.app/v1/api/config/#allowlistconfig.fs) in `tauri.conf.json`:\n * ```json\n * {\n *   \"tauri\": {\n *     \"allowlist\": {\n *       \"fs\": {\n *         \"all\": true, // enable all FS APIs\n *         \"readFile\": true,\n *         \"writeFile\": true,\n *         \"readDir\": true,\n *         \"copyFile\": true,\n *         \"createDir\": true,\n *         \"removeDir\": true,\n *         \"removeFile\": true,\n *         \"renameFile\": true,\n *         \"exists\": true\n *       }\n *     }\n *   }\n * }\n * ```\n * It is recommended to allowlist only the APIs you use for optimal bundle size and security.\n *\n * ## Security\n *\n * This module prevents path traversal, not allowing absolute paths or parent dir components\n * (i.e. \"/usr/path/to/file\" or \"../path/to/file\" paths are not allowed).\n * Paths accessed with this API must be relative to one of the {@link BaseDirectory | base directories}\n * so if you need access to arbitrary filesystem paths, you must write such logic on the core layer instead.\n *\n * The API has a scope configuration that forces you to restrict the paths that can be accessed using glob patterns.\n *\n * The scope configuration is an array of glob patterns describing folder paths that are allowed.\n * For instance, this scope configuration only allows accessing files on the\n * *databases* folder of the {@link path.appDataDir | $APPDATA directory}:\n * ```json\n * {\n *   \"tauri\": {\n *     \"allowlist\": {\n *       \"fs\": {\n *         \"scope\": [\"$APPDATA/databases/*\"]\n *       }\n *     }\n *   }\n * }\n * ```\n *\n * Notice the use of the `$APPDATA` variable. The value is injected at runtime, resolving to the {@link path.appDataDir | app data directory}.\n * The available variables are:\n * {@link path.appConfigDir | `$APPCONFIG`}, {@link path.appDataDir | `$APPDATA`}, {@link path.appLocalDataDir | `$APPLOCALDATA`},\n * {@link path.appCacheDir | `$APPCACHE`}, {@link path.appLogDir | `$APPLOG`},\n * {@link path.audioDir | `$AUDIO`}, {@link path.cacheDir | `$CACHE`}, {@link path.configDir | `$CONFIG`}, {@link path.dataDir | `$DATA`},\n * {@link path.localDataDir | `$LOCALDATA`}, {@link path.desktopDir | `$DESKTOP`}, {@link path.documentDir | `$DOCUMENT`},\n * {@link path.downloadDir | `$DOWNLOAD`}, {@link path.executableDir | `$EXE`}, {@link path.fontDir | `$FONT`}, {@link path.homeDir | `$HOME`},\n * {@link path.pictureDir | `$PICTURE`}, {@link path.publicDir | `$PUBLIC`}, {@link path.runtimeDir | `$RUNTIME`},\n * {@link path.templateDir | `$TEMPLATE`}, {@link path.videoDir | `$VIDEO`}, {@link path.resourceDir | `$RESOURCE`}, {@link path.appDir | `$APP`},\n * {@link path.logDir | `$LOG`}, {@link os.tempdir | `$TEMP`}.\n *\n * Trying to execute any API with a URL not configured on the scope results in a promise rejection due to denied access.\n *\n * Note that this scope applies to **all** APIs on this module.\n *\n * @module\n */\n/**\n * @since 1.0.0\n */\nvar BaseDirectory;\n(function (BaseDirectory) {\n    BaseDirectory[BaseDirectory[\"Audio\"] = 1] = \"Audio\";\n    BaseDirectory[BaseDirectory[\"Cache\"] = 2] = \"Cache\";\n    BaseDirectory[BaseDirectory[\"Config\"] = 3] = \"Config\";\n    BaseDirectory[BaseDirectory[\"Data\"] = 4] = \"Data\";\n    BaseDirectory[BaseDirectory[\"LocalData\"] = 5] = \"LocalData\";\n    BaseDirectory[BaseDirectory[\"Desktop\"] = 6] = \"Desktop\";\n    BaseDirectory[BaseDirectory[\"Document\"] = 7] = \"Document\";\n    BaseDirectory[BaseDirectory[\"Download\"] = 8] = \"Download\";\n    BaseDirectory[BaseDirectory[\"Executable\"] = 9] = \"Executable\";\n    BaseDirectory[BaseDirectory[\"Font\"] = 10] = \"Font\";\n    BaseDirectory[BaseDirectory[\"Home\"] = 11] = \"Home\";\n    BaseDirectory[BaseDirectory[\"Picture\"] = 12] = \"Picture\";\n    BaseDirectory[BaseDirectory[\"Public\"] = 13] = \"Public\";\n    BaseDirectory[BaseDirectory[\"Runtime\"] = 14] = \"Runtime\";\n    BaseDirectory[BaseDirectory[\"Template\"] = 15] = \"Template\";\n    BaseDirectory[BaseDirectory[\"Video\"] = 16] = \"Video\";\n    BaseDirectory[BaseDirectory[\"Resource\"] = 17] = \"Resource\";\n    BaseDirectory[BaseDirectory[\"App\"] = 18] = \"App\";\n    BaseDirectory[BaseDirectory[\"Log\"] = 19] = \"Log\";\n    BaseDirectory[BaseDirectory[\"Temp\"] = 20] = \"Temp\";\n    BaseDirectory[BaseDirectory[\"AppConfig\"] = 21] = \"AppConfig\";\n    BaseDirectory[BaseDirectory[\"AppData\"] = 22] = \"AppData\";\n    BaseDirectory[BaseDirectory[\"AppLocalData\"] = 23] = \"AppLocalData\";\n    BaseDirectory[BaseDirectory[\"AppCache\"] = 24] = \"AppCache\";\n    BaseDirectory[BaseDirectory[\"AppLog\"] = 25] = \"AppLog\";\n})(BaseDirectory || (BaseDirectory = {}));\n/**\n * Reads a file as an UTF-8 encoded string.\n * @example\n * ```typescript\n * import { readTextFile, BaseDirectory } from '@tauri-apps/api/fs';\n * // Read the text file in the `$APPCONFIG/app.conf` path\n * const contents = await readTextFile('app.conf', { dir: BaseDirectory.AppConfig });\n * ```\n *\n * @since 1.0.0\n */\nasync function readTextFile(filePath, options = {}) {\n    return invokeTauriCommand({\n        __tauriModule: 'Fs',\n        message: {\n            cmd: 'readTextFile',\n            path: filePath,\n            options\n        }\n    });\n}\n/**\n * Reads a file as byte array.\n * @example\n * ```typescript\n * import { readBinaryFile, BaseDirectory } from '@tauri-apps/api/fs';\n * // Read the image file in the `$RESOURCEDIR/avatar.png` path\n * const contents = await readBinaryFile('avatar.png', { dir: BaseDirectory.Resource });\n * ```\n *\n * @since 1.0.0\n */\nasync function readBinaryFile(filePath, options = {}) {\n    const arr = await invokeTauriCommand({\n        __tauriModule: 'Fs',\n        message: {\n            cmd: 'readFile',\n            path: filePath,\n            options\n        }\n    });\n    return Uint8Array.from(arr);\n}\n/**\n * Writes a UTF-8 text file.\n *\n * @returns A promise indicating the success or failure of the operation.\n *\n * @since 1.0.0\n */\nasync function writeTextFile(path, contents, options) {\n    if (typeof options === 'object') {\n        Object.freeze(options);\n    }\n    if (typeof path === 'object') {\n        Object.freeze(path);\n    }\n    const file = { path: '', contents: '' };\n    let fileOptions = options;\n    if (typeof path === 'string') {\n        file.path = path;\n    }\n    else {\n        file.path = path.path;\n        file.contents = path.contents;\n    }\n    if (typeof contents === 'string') {\n        file.contents = contents ?? '';\n    }\n    else {\n        fileOptions = contents;\n    }\n    return invokeTauriCommand({\n        __tauriModule: 'Fs',\n        message: {\n            cmd: 'writeFile',\n            path: file.path,\n            contents: Array.from(new TextEncoder().encode(file.contents)),\n            options: fileOptions\n        }\n    });\n}\n/**\n * Writes a byte array content to a file.\n *\n * @returns A promise indicating the success or failure of the operation.\n *\n * @since 1.0.0\n */\nasync function writeBinaryFile(path, contents, options) {\n    if (typeof options === 'object') {\n        Object.freeze(options);\n    }\n    if (typeof path === 'object') {\n        Object.freeze(path);\n    }\n    const file = { path: '', contents: [] };\n    let fileOptions = options;\n    if (typeof path === 'string') {\n        file.path = path;\n    }\n    else {\n        file.path = path.path;\n        file.contents = path.contents;\n    }\n    if (contents && 'dir' in contents) {\n        fileOptions = contents;\n    }\n    else if (typeof path === 'string') {\n        // @ts-expect-error in this case `contents` is always a BinaryFileContents\n        file.contents = contents ?? [];\n    }\n    return invokeTauriCommand({\n        __tauriModule: 'Fs',\n        message: {\n            cmd: 'writeFile',\n            path: file.path,\n            contents: Array.from(file.contents instanceof ArrayBuffer\n                ? new Uint8Array(file.contents)\n                : file.contents),\n            options: fileOptions\n        }\n    });\n}\n/**\n * List directory files.\n * @example\n * ```typescript\n * import { readDir, BaseDirectory } from '@tauri-apps/api/fs';\n * // Reads the `$APPDATA/users` directory recursively\n * const entries = await readDir('users', { dir: BaseDirectory.AppData, recursive: true });\n *\n * function processEntries(entries) {\n *   for (const entry of entries) {\n *     console.log(`Entry: ${entry.path}`);\n *     if (entry.children) {\n *       processEntries(entry.children)\n *     }\n *   }\n * }\n * ```\n *\n * @since 1.0.0\n */\nasync function readDir(dir, options = {}) {\n    return invokeTauriCommand({\n        __tauriModule: 'Fs',\n        message: {\n            cmd: 'readDir',\n            path: dir,\n            options\n        }\n    });\n}\n/**\n * Creates a directory.\n * If one of the path's parent components doesn't exist\n * and the `recursive` option isn't set to true, the promise will be rejected.\n * @example\n * ```typescript\n * import { createDir, BaseDirectory } from '@tauri-apps/api/fs';\n * // Create the `$APPDATA/users` directory\n * await createDir('users', { dir: BaseDirectory.AppData, recursive: true });\n * ```\n *\n * @returns A promise indicating the success or failure of the operation.\n *\n * @since 1.0.0\n */\nasync function createDir(dir, options = {}) {\n    return invokeTauriCommand({\n        __tauriModule: 'Fs',\n        message: {\n            cmd: 'createDir',\n            path: dir,\n            options\n        }\n    });\n}\n/**\n * Removes a directory.\n * If the directory is not empty and the `recursive` option isn't set to true, the promise will be rejected.\n * @example\n * ```typescript\n * import { removeDir, BaseDirectory } from '@tauri-apps/api/fs';\n * // Remove the directory `$APPDATA/users`\n * await removeDir('users', { dir: BaseDirectory.AppData });\n * ```\n *\n * @returns A promise indicating the success or failure of the operation.\n *\n * @since 1.0.0\n */\nasync function removeDir(dir, options = {}) {\n    return invokeTauriCommand({\n        __tauriModule: 'Fs',\n        message: {\n            cmd: 'removeDir',\n            path: dir,\n            options\n        }\n    });\n}\n/**\n * Copies a file to a destination.\n * @example\n * ```typescript\n * import { copyFile, BaseDirectory } from '@tauri-apps/api/fs';\n * // Copy the `$APPCONFIG/app.conf` file to `$APPCONFIG/app.conf.bk`\n * await copyFile('app.conf', 'app.conf.bk', { dir: BaseDirectory.AppConfig });\n * ```\n *\n * @returns A promise indicating the success or failure of the operation.\n *\n * @since 1.0.0\n */\nasync function copyFile(source, destination, options = {}) {\n    return invokeTauriCommand({\n        __tauriModule: 'Fs',\n        message: {\n            cmd: 'copyFile',\n            source,\n            destination,\n            options\n        }\n    });\n}\n/**\n * Removes a file.\n * @example\n * ```typescript\n * import { removeFile, BaseDirectory } from '@tauri-apps/api/fs';\n * // Remove the `$APPConfig/app.conf` file\n * await removeFile('app.conf', { dir: BaseDirectory.AppConfig });\n * ```\n *\n * @returns A promise indicating the success or failure of the operation.\n *\n * @since 1.0.0\n */\nasync function removeFile(file, options = {}) {\n    return invokeTauriCommand({\n        __tauriModule: 'Fs',\n        message: {\n            cmd: 'removeFile',\n            path: file,\n            options\n        }\n    });\n}\n/**\n * Renames a file.\n * @example\n * ```typescript\n * import { renameFile, BaseDirectory } from '@tauri-apps/api/fs';\n * // Rename the `$APPDATA/avatar.png` file\n * await renameFile('avatar.png', 'deleted.png', { dir: BaseDirectory.AppData });\n * ```\n *\n * @returns A promise indicating the success or failure of the operation.\n *\n * @since 1.0.0\n */\nasync function renameFile(oldPath, newPath, options = {}) {\n    return invokeTauriCommand({\n        __tauriModule: 'Fs',\n        message: {\n            cmd: 'renameFile',\n            oldPath,\n            newPath,\n            options\n        }\n    });\n}\n/**\n * Check if a path exists.\n * @example\n * ```typescript\n * import { exists, BaseDirectory } from '@tauri-apps/api/fs';\n * // Check if the `$APPDATA/avatar.png` file exists\n * await exists('avatar.png', { dir: BaseDirectory.AppData });\n * ```\n *\n * @since 1.1.0\n */\nasync function exists(path, options = {}) {\n    return invokeTauriCommand({\n        __tauriModule: 'Fs',\n        message: {\n            cmd: 'exists',\n            path,\n            options\n        }\n    });\n}\n\nexport { BaseDirectory, BaseDirectory as Dir, copyFile, createDir, exists, readBinaryFile, readDir, readTextFile, removeDir, removeFile, renameFile, writeBinaryFile, writeTextFile as writeFile, writeTextFile };\n", "import { invokeTauriCommand } from './helpers/tauri.js';\nimport { transformCallback } from './tauri.js';\n\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * Register global shortcuts.\n *\n * This package is also accessible with `window.__TAURI__.globalShortcut` when [`build.withGlobalTauri`](https://tauri.app/v1/api/config/#buildconfig.withglobaltauri) in `tauri.conf.json` is set to `true`.\n *\n * The APIs must be added to [`tauri.allowlist.globalShortcut`](https://tauri.app/v1/api/config/#allowlistconfig.globalshortcut) in `tauri.conf.json`:\n * ```json\n * {\n *   \"tauri\": {\n *     \"allowlist\": {\n *       \"globalShortcut\": {\n *         \"all\": true // enable all global shortcut APIs\n *       }\n *     }\n *   }\n * }\n * ```\n * It is recommended to allowlist only the APIs you use for optimal bundle size and security.\n * @module\n */\n/**\n * Register a global shortcut.\n * @example\n * ```typescript\n * import { register } from '@tauri-apps/api/globalShortcut';\n * await register('CommandOrControl+Shift+C', () => {\n *   console.log('Shortcut triggered');\n * });\n * ```\n *\n * @param shortcut Shortcut definition, modifiers and key separated by \"+\" e.g. CmdOrControl+Q\n * @param handler Shortcut handler callback - takes the triggered shortcut as argument\n *\n * @since 1.0.0\n */\nasync function register(shortcut, handler) {\n    return invokeTauriCommand({\n        __tauriModule: 'GlobalShortcut',\n        message: {\n            cmd: 'register',\n            shortcut,\n            handler: transformCallback(handler)\n        }\n    });\n}\n/**\n * Register a collection of global shortcuts.\n * @example\n * ```typescript\n * import { registerAll } from '@tauri-apps/api/globalShortcut';\n * await registerAll(['CommandOrControl+Shift+C', 'Ctrl+Alt+F12'], (shortcut) => {\n *   console.log(`Shortcut ${shortcut} triggered`);\n * });\n * ```\n *\n * @param shortcuts Array of shortcut definitions, modifiers and key separated by \"+\" e.g. CmdOrControl+Q\n * @param handler Shortcut handler callback - takes the triggered shortcut as argument\n *\n * @since 1.0.0\n */\nasync function registerAll(shortcuts, handler) {\n    return invokeTauriCommand({\n        __tauriModule: 'GlobalShortcut',\n        message: {\n            cmd: 'registerAll',\n            shortcuts,\n            handler: transformCallback(handler)\n        }\n    });\n}\n/**\n * Determines whether the given shortcut is registered by this application or not.\n * @example\n * ```typescript\n * import { isRegistered } from '@tauri-apps/api/globalShortcut';\n * const isRegistered = await isRegistered('CommandOrControl+P');\n * ```\n *\n * @param shortcut Array of shortcut definitions, modifiers and key separated by \"+\" e.g. CmdOrControl+Q\n *\n * @since 1.0.0\n */\nasync function isRegistered(shortcut) {\n    return invokeTauriCommand({\n        __tauriModule: 'GlobalShortcut',\n        message: {\n            cmd: 'isRegistered',\n            shortcut\n        }\n    });\n}\n/**\n * Unregister a global shortcut.\n * @example\n * ```typescript\n * import { unregister } from '@tauri-apps/api/globalShortcut';\n * await unregister('CmdOrControl+Space');\n * ```\n *\n * @param shortcut shortcut definition, modifiers and key separated by \"+\" e.g. CmdOrControl+Q\n *\n * @since 1.0.0\n */\nasync function unregister(shortcut) {\n    return invokeTauriCommand({\n        __tauriModule: 'GlobalShortcut',\n        message: {\n            cmd: 'unregister',\n            shortcut\n        }\n    });\n}\n/**\n * Unregisters all shortcuts registered by the application.\n * @example\n * ```typescript\n * import { unregisterAll } from '@tauri-apps/api/globalShortcut';\n * await unregisterAll();\n * ```\n *\n * @since 1.0.0\n */\nasync function unregisterAll() {\n    return invokeTauriCommand({\n        __tauriModule: 'GlobalShortcut',\n        message: {\n            cmd: 'unregisterAll'\n        }\n    });\n}\n\nexport { isRegistered, register, registerAll, unregister, unregisterAll };\n", "import { invokeTauriCommand } from './helpers/tauri.js';\n\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * Access the HTTP client written in Rust.\n *\n * This package is also accessible with `window.__TAURI__.http` when [`build.withGlobalTauri`](https://tauri.app/v1/api/config/#buildconfig.withglobaltauri) in `tauri.conf.json` is set to `true`.\n *\n * The APIs must be allowlisted on `tauri.conf.json`:\n * ```json\n * {\n *   \"tauri\": {\n *     \"allowlist\": {\n *       \"http\": {\n *         \"all\": true, // enable all http APIs\n *         \"request\": true // enable HTTP request API\n *       }\n *     }\n *   }\n * }\n * ```\n * It is recommended to allowlist only the APIs you use for optimal bundle size and security.\n *\n * ## Security\n *\n * This API has a scope configuration that forces you to restrict the URLs and paths that can be accessed using glob patterns.\n *\n * For instance, this scope configuration only allows making HTTP requests to the GitHub API for the `tauri-apps` organization:\n * ```json\n * {\n *   \"tauri\": {\n *     \"allowlist\": {\n *       \"http\": {\n *         \"scope\": [\"https://api.github.com/repos/tauri-apps/*\"]\n *       }\n *     }\n *   }\n * }\n * ```\n * Trying to execute any API with a URL not configured on the scope results in a promise rejection due to denied access.\n *\n * @module\n */\n/**\n * @since 1.0.0\n */\nvar ResponseType;\n(function (ResponseType) {\n    ResponseType[ResponseType[\"JSON\"] = 1] = \"JSON\";\n    ResponseType[ResponseType[\"Text\"] = 2] = \"Text\";\n    ResponseType[ResponseType[\"Binary\"] = 3] = \"Binary\";\n})(ResponseType || (ResponseType = {}));\nasync function formBody(data) {\n    const form = {};\n    const append = async (key, v) => {\n        if (v !== null) {\n            let r;\n            if (typeof v === 'string') {\n                r = v;\n            }\n            else if (v instanceof Uint8Array || Array.isArray(v)) {\n                r = Array.from(v);\n            }\n            else if (v instanceof File) {\n                r = {\n                    file: Array.from(new Uint8Array(await v.arrayBuffer())),\n                    mime: v.type,\n                    fileName: v.name\n                };\n            }\n            else if (typeof v.file === 'string') {\n                r = { file: v.file, mime: v.mime, fileName: v.fileName };\n            }\n            else {\n                r = { file: Array.from(v.file), mime: v.mime, fileName: v.fileName };\n            }\n            form[String(key)] = r;\n        }\n    };\n    if (data instanceof FormData) {\n        for (const [key, value] of data) {\n            await append(key, value);\n        }\n    }\n    else {\n        for (const [key, value] of Object.entries(data)) {\n            await append(key, value);\n        }\n    }\n    return form;\n}\n/**\n * The body object to be used on POST and PUT requests.\n *\n * @since 1.0.0\n */\nclass Body {\n    /** @ignore */\n    constructor(type, payload) {\n        this.type = type;\n        this.payload = payload;\n    }\n    /**\n     * Creates a new form data body. The form data is an object where each key is the entry name,\n     * and the value is either a string or a file object.\n     *\n     * By default it sets the `application/x-www-form-urlencoded` Content-Type header,\n     * but you can set it to `multipart/form-data` if the Cargo feature `http-multipart` is enabled.\n     *\n     * Note that a file path must be allowed in the `fs` allowlist scope.\n     *\n     * @example\n     * ```typescript\n     * import { Body } from \"@tauri-apps/api/http\"\n     * const body = Body.form({\n     *   key: 'value',\n     *   image: {\n     *     file: '/path/to/file', // either a path or an array buffer of the file contents\n     *     mime: 'image/jpeg', // optional\n     *     fileName: 'image.jpg' // optional\n     *   }\n     * });\n     *\n     * // alternatively, use a FormData:\n     * const form = new FormData();\n     * form.append('key', 'value');\n     * form.append('image', file, 'image.png');\n     * const formBody = Body.form(form);\n     * ```\n     *\n     * @param data The body data.\n     *\n     * @returns The body object ready to be used on the POST and PUT requests.\n     */\n    static form(data) {\n        return new Body('Form', data);\n    }\n    /**\n     * Creates a new JSON body.\n     * @example\n     * ```typescript\n     * import { Body } from \"@tauri-apps/api/http\"\n     * Body.json({\n     *   registered: true,\n     *   name: 'tauri'\n     * });\n     * ```\n     *\n     * @param data The body JSON object.\n     *\n     * @returns The body object ready to be used on the POST and PUT requests.\n     */\n    static json(data) {\n        return new Body('Json', data);\n    }\n    /**\n     * Creates a new UTF-8 string body.\n     * @example\n     * ```typescript\n     * import { Body } from \"@tauri-apps/api/http\"\n     * Body.text('The body content as a string');\n     * ```\n     *\n     * @param value The body string.\n     *\n     * @returns The body object ready to be used on the POST and PUT requests.\n     */\n    static text(value) {\n        return new Body('Text', value);\n    }\n    /**\n     * Creates a new byte array body.\n     * @example\n     * ```typescript\n     * import { Body } from \"@tauri-apps/api/http\"\n     * Body.bytes(new Uint8Array([1, 2, 3]));\n     * ```\n     *\n     * @param bytes The body byte array.\n     *\n     * @returns The body object ready to be used on the POST and PUT requests.\n     */\n    static bytes(bytes) {\n        // stringifying Uint8Array doesn't return an array of numbers, so we create one here\n        return new Body('Bytes', Array.from(bytes instanceof ArrayBuffer ? new Uint8Array(bytes) : bytes));\n    }\n}\n/**\n * Response object.\n *\n * @since 1.0.0\n * */\nclass Response {\n    /** @ignore */\n    constructor(response) {\n        this.url = response.url;\n        this.status = response.status;\n        this.ok = this.status >= 200 && this.status < 300;\n        this.headers = response.headers;\n        this.rawHeaders = response.rawHeaders;\n        this.data = response.data;\n    }\n}\n/**\n * @since 1.0.0\n */\nclass Client {\n    /** @ignore */\n    constructor(id) {\n        this.id = id;\n    }\n    /**\n     * Drops the client instance.\n     * @example\n     * ```typescript\n     * import { getClient } from '@tauri-apps/api/http';\n     * const client = await getClient();\n     * await client.drop();\n     * ```\n     */\n    async drop() {\n        return invokeTauriCommand({\n            __tauriModule: 'Http',\n            message: {\n                cmd: 'dropClient',\n                client: this.id\n            }\n        });\n    }\n    /**\n     * Makes an HTTP request.\n     * @example\n     * ```typescript\n     * import { getClient } from '@tauri-apps/api/http';\n     * const client = await getClient();\n     * const response = await client.request({\n     *   method: 'GET',\n     *   url: 'http://localhost:3003/users',\n     * });\n     * ```\n     */\n    async request(options) {\n        const jsonResponse = !options.responseType || options.responseType === ResponseType.JSON;\n        if (jsonResponse) {\n            options.responseType = ResponseType.Text;\n        }\n        if (options.body?.type === 'Form') {\n            options.body.payload = await formBody(options.body.payload);\n        }\n        return invokeTauriCommand({\n            __tauriModule: 'Http',\n            message: {\n                cmd: 'httpRequest',\n                client: this.id,\n                options\n            }\n        }).then((res) => {\n            const response = new Response(res);\n            if (jsonResponse) {\n                /* eslint-disable */\n                try {\n                    response.data = JSON.parse(response.data);\n                }\n                catch (e) {\n                    if (response.ok && response.data === '') {\n                        response.data = {};\n                    }\n                    else if (response.ok) {\n                        throw Error(`Failed to parse response \\`${response.data}\\` as JSON: ${e};\n              try setting the \\`responseType\\` option to \\`ResponseType.Text\\` or \\`ResponseType.Binary\\` if the API does not return a JSON response.`);\n                    }\n                }\n                /* eslint-enable */\n                return response;\n            }\n            return response;\n        });\n    }\n    /**\n     * Makes a GET request.\n     * @example\n     * ```typescript\n     * import { getClient, ResponseType } from '@tauri-apps/api/http';\n     * const client = await getClient();\n     * const response = await client.get('http://localhost:3003/users', {\n     *   timeout: 30,\n     *   // the expected response type\n     *   responseType: ResponseType.JSON\n     * });\n     * ```\n     */\n    async get(url, options) {\n        return this.request({\n            method: 'GET',\n            url,\n            ...options\n        });\n    }\n    /**\n     * Makes a POST request.\n     * @example\n     * ```typescript\n     * import { getClient, Body, ResponseType } from '@tauri-apps/api/http';\n     * const client = await getClient();\n     * const response = await client.post('http://localhost:3003/users', {\n     *   body: Body.json({\n     *     name: 'tauri',\n     *     password: 'awesome'\n     *   }),\n     *   // in this case the server returns a simple string\n     *   responseType: ResponseType.Text,\n     * });\n     * ```\n     */\n    async post(url, body, options) {\n        return this.request({\n            method: 'POST',\n            url,\n            body,\n            ...options\n        });\n    }\n    /**\n     * Makes a PUT request.\n     * @example\n     * ```typescript\n     * import { getClient, Body } from '@tauri-apps/api/http';\n     * const client = await getClient();\n     * const response = await client.put('http://localhost:3003/users/1', {\n     *   body: Body.form({\n     *     file: {\n     *       file: '/home/tauri/avatar.png',\n     *       mime: 'image/png',\n     *       fileName: 'avatar.png'\n     *     }\n     *   })\n     * });\n     * ```\n     */\n    async put(url, body, options) {\n        return this.request({\n            method: 'PUT',\n            url,\n            body,\n            ...options\n        });\n    }\n    /**\n     * Makes a PATCH request.\n     * @example\n     * ```typescript\n     * import { getClient, Body } from '@tauri-apps/api/http';\n     * const client = await getClient();\n     * const response = await client.patch('http://localhost:3003/users/1', {\n     *   body: Body.json({ email: 'contact@tauri.app' })\n     * });\n     * ```\n     */\n    async patch(url, options) {\n        return this.request({\n            method: 'PATCH',\n            url,\n            ...options\n        });\n    }\n    /**\n     * Makes a DELETE request.\n     * @example\n     * ```typescript\n     * import { getClient } from '@tauri-apps/api/http';\n     * const client = await getClient();\n     * const response = await client.delete('http://localhost:3003/users/1');\n     * ```\n     */\n    async delete(url, options) {\n        return this.request({\n            method: 'DELETE',\n            url,\n            ...options\n        });\n    }\n}\n/**\n * Creates a new client using the specified options.\n * @example\n * ```typescript\n * import { getClient } from '@tauri-apps/api/http';\n * const client = await getClient();\n * ```\n *\n * @param options Client configuration.\n *\n * @returns A promise resolving to the client instance.\n *\n * @since 1.0.0\n */\nasync function getClient(options) {\n    return invokeTauriCommand({\n        __tauriModule: 'Http',\n        message: {\n            cmd: 'createClient',\n            options\n        }\n    }).then((id) => new Client(id));\n}\n/** @internal */\nlet defaultClient = null;\n/**\n * Perform an HTTP request using the default client.\n * @example\n * ```typescript\n * import { fetch } from '@tauri-apps/api/http';\n * const response = await fetch('http://localhost:3003/users/2', {\n *   method: 'GET',\n *   timeout: 30,\n * });\n * ```\n */\nasync function fetch(url, options) {\n    if (defaultClient === null) {\n        defaultClient = await getClient();\n    }\n    return defaultClient.request({\n        url,\n        method: options?.method ?? 'GET',\n        ...options\n    });\n}\n\nexport { Body, Client, Response, ResponseType, fetch, getClient };\n", "import { invokeTauriCommand } from './helpers/tauri.js';\n\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * Send toast notifications (brief auto-expiring OS window element) to your user.\n * Can also be used with the Notification Web API.\n *\n * This package is also accessible with `window.__TAURI__.notification` when [`build.withGlobalTauri`](https://tauri.app/v1/api/config/#buildconfig.withglobaltauri) in `tauri.conf.json` is set to `true`.\n *\n * The APIs must be added to [`tauri.allowlist.notification`](https://tauri.app/v1/api/config/#allowlistconfig.notification) in `tauri.conf.json`:\n * ```json\n * {\n *   \"tauri\": {\n *     \"allowlist\": {\n *       \"notification\": {\n *         \"all\": true // enable all notification APIs\n *       }\n *     }\n *   }\n * }\n * ```\n * It is recommended to allowlist only the APIs you use for optimal bundle size and security.\n * @module\n */\n/**\n * Checks if the permission to send notifications is granted.\n * @example\n * ```typescript\n * import { isPermissionGranted } from '@tauri-apps/api/notification';\n * const permissionGranted = await isPermissionGranted();\n * ```\n *\n * @since 1.0.0\n */\nasync function isPermissionGranted() {\n    if (window.Notification.permission !== 'default') {\n        return Promise.resolve(window.Notification.permission === 'granted');\n    }\n    return invokeTauriCommand({\n        __tauriModule: 'Notification',\n        message: {\n            cmd: 'isNotificationPermissionGranted'\n        }\n    });\n}\n/**\n * Requests the permission to send notifications.\n * @example\n * ```typescript\n * import { isPermissionGranted, requestPermission } from '@tauri-apps/api/notification';\n * let permissionGranted = await isPermissionGranted();\n * if (!permissionGranted) {\n *   const permission = await requestPermission();\n *   permissionGranted = permission === 'granted';\n * }\n * ```\n *\n * @returns A promise resolving to whether the user granted the permission or not.\n *\n * @since 1.0.0\n */\nasync function requestPermission() {\n    return window.Notification.requestPermission();\n}\n/**\n * Sends a notification to the user.\n * @example\n * ```typescript\n * import { isPermissionGranted, requestPermission, sendNotification } from '@tauri-apps/api/notification';\n * let permissionGranted = await isPermissionGranted();\n * if (!permissionGranted) {\n *   const permission = await requestPermission();\n *   permissionGranted = permission === 'granted';\n * }\n * if (permissionGranted) {\n *   sendNotification('Tauri is awesome!');\n *   sendNotification({ title: 'TAURI', body: 'Tauri is awesome!' });\n * }\n * ```\n *\n * @since 1.0.0\n */\nfunction sendNotification(options) {\n    if (typeof options === 'string') {\n        // eslint-disable-next-line no-new\n        new window.Notification(options);\n    }\n    else {\n        // eslint-disable-next-line no-new\n        new window.Notification(options.title, options);\n    }\n}\n\nexport { isPermissionGranted, requestPermission, sendNotification };\n", "import { invokeTauriCommand } from './helpers/tauri.js';\nimport { BaseDirectory } from './fs.js';\nimport { isWindows } from './helpers/os-check.js';\n\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * The path module provides utilities for working with file and directory paths.\n *\n * This package is also accessible with `window.__TAURI__.path` when [`build.withGlobalTauri`](https://tauri.app/v1/api/config/#buildconfig.withglobaltauri) in `tauri.conf.json` is set to `true`.\n *\n * The APIs must be added to [`tauri.allowlist.path`](https://tauri.app/v1/api/config/#allowlistconfig.path) in `tauri.conf.json`:\n * ```json\n * {\n *   \"tauri\": {\n *     \"allowlist\": {\n *       \"path\": {\n *         \"all\": true, // enable all Path APIs\n *       }\n *     }\n *   }\n * }\n * ```\n * It is recommended to allowlist only the APIs you use for optimal bundle size and security.\n * @module\n */\n/**\n * Returns the path to the suggested directory for your app config files.\n *\n * @deprecated since 1.2.0: Will be removed in 2.0.0. Use {@link appConfigDir} or {@link appDataDir} instead.\n * @since 1.0.0\n */\nasync function appDir() {\n    return appConfigDir();\n}\n/**\n * Returns the path to the suggested directory for your app's config files.\n * Resolves to `${configDir}/${bundleIdentifier}`, where `bundleIdentifier` is the value [`tauri.bundle.identifier`](https://tauri.app/v1/api/config/#bundleconfig.identifier) is configured in `tauri.conf.json`.\n * @example\n * ```typescript\n * import { appConfigDir } from '@tauri-apps/api/path';\n * const appConfigDirPath = await appConfigDir();\n * ```\n *\n * @since 1.2.0\n */\nasync function appConfigDir() {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'resolvePath',\n            path: '',\n            directory: BaseDirectory.AppConfig\n        }\n    });\n}\n/**\n * Returns the path to the suggested directory for your app's data files.\n * Resolves to `${dataDir}/${bundleIdentifier}`, where `bundleIdentifier` is the value [`tauri.bundle.identifier`](https://tauri.app/v1/api/config/#bundleconfig.identifier) is configured in `tauri.conf.json`.\n * @example\n * ```typescript\n * import { appDataDir } from '@tauri-apps/api/path';\n * const appDataDirPath = await appDataDir();\n * ```\n *\n * @since 1.2.0\n */\nasync function appDataDir() {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'resolvePath',\n            path: '',\n            directory: BaseDirectory.AppData\n        }\n    });\n}\n/**\n * Returns the path to the suggested directory for your app's local data files.\n * Resolves to `${localDataDir}/${bundleIdentifier}`, where `bundleIdentifier` is the value [`tauri.bundle.identifier`](https://tauri.app/v1/api/config/#bundleconfig.identifier) is configured in `tauri.conf.json`.\n * @example\n * ```typescript\n * import { appLocalDataDir } from '@tauri-apps/api/path';\n * const appLocalDataDirPath = await appLocalDataDir();\n * ```\n *\n * @since 1.2.0\n */\nasync function appLocalDataDir() {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'resolvePath',\n            path: '',\n            directory: BaseDirectory.AppLocalData\n        }\n    });\n}\n/**\n * Returns the path to the suggested directory for your app's cache files.\n * Resolves to `${cacheDir}/${bundleIdentifier}`, where `bundleIdentifier` is the value [`tauri.bundle.identifier`](https://tauri.app/v1/api/config/#bundleconfig.identifier) is configured in `tauri.conf.json`.\n * @example\n * ```typescript\n * import { appCacheDir } from '@tauri-apps/api/path';\n * const appCacheDirPath = await appCacheDir();\n * ```\n *\n * @since 1.2.0\n */\nasync function appCacheDir() {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'resolvePath',\n            path: '',\n            directory: BaseDirectory.AppCache\n        }\n    });\n}\n/**\n * Returns the path to the user's audio directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to [`xdg-user-dirs`](https://www.freedesktop.org/wiki/Software/xdg-user-dirs/)' `XDG_MUSIC_DIR`.\n * - **macOS:** Resolves to `$HOME/Music`.\n * - **Windows:** Resolves to `{FOLDERID_Music}`.\n * @example\n * ```typescript\n * import { audioDir } from '@tauri-apps/api/path';\n * const audioDirPath = await audioDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function audioDir() {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'resolvePath',\n            path: '',\n            directory: BaseDirectory.Audio\n        }\n    });\n}\n/**\n * Returns the path to the user's cache directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to `$XDG_CACHE_HOME` or `$HOME/.cache`.\n * - **macOS:** Resolves to `$HOME/Library/Caches`.\n * - **Windows:** Resolves to `{FOLDERID_LocalAppData}`.\n * @example\n * ```typescript\n * import { cacheDir } from '@tauri-apps/api/path';\n * const cacheDirPath = await cacheDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function cacheDir() {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'resolvePath',\n            path: '',\n            directory: BaseDirectory.Cache\n        }\n    });\n}\n/**\n * Returns the path to the user's config directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to `$XDG_CONFIG_HOME` or `$HOME/.config`.\n * - **macOS:** Resolves to `$HOME/Library/Application Support`.\n * - **Windows:** Resolves to `{FOLDERID_RoamingAppData}`.\n * @example\n * ```typescript\n * import { configDir } from '@tauri-apps/api/path';\n * const configDirPath = await configDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function configDir() {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'resolvePath',\n            path: '',\n            directory: BaseDirectory.Config\n        }\n    });\n}\n/**\n * Returns the path to the user's data directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to `$XDG_DATA_HOME` or `$HOME/.local/share`.\n * - **macOS:** Resolves to `$HOME/Library/Application Support`.\n * - **Windows:** Resolves to `{FOLDERID_RoamingAppData}`.\n * @example\n * ```typescript\n * import { dataDir } from '@tauri-apps/api/path';\n * const dataDirPath = await dataDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function dataDir() {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'resolvePath',\n            path: '',\n            directory: BaseDirectory.Data\n        }\n    });\n}\n/**\n * Returns the path to the user's desktop directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to [`xdg-user-dirs`](https://www.freedesktop.org/wiki/Software/xdg-user-dirs/)' `XDG_DESKTOP_DIR`.\n * - **macOS:** Resolves to `$HOME/Desktop`.\n * - **Windows:** Resolves to `{FOLDERID_Desktop}`.\n * @example\n * ```typescript\n * import { desktopDir } from '@tauri-apps/api/path';\n * const desktopPath = await desktopDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function desktopDir() {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'resolvePath',\n            path: '',\n            directory: BaseDirectory.Desktop\n        }\n    });\n}\n/**\n * Returns the path to the user's document directory.\n * @example\n * ```typescript\n * import { documentDir } from '@tauri-apps/api/path';\n * const documentDirPath = await documentDir();\n * ```\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to [`xdg-user-dirs`](https://www.freedesktop.org/wiki/Software/xdg-user-dirs/)' `XDG_DOCUMENTS_DIR`.\n * - **macOS:** Resolves to `$HOME/Documents`.\n * - **Windows:** Resolves to `{FOLDERID_Documents}`.\n *\n * @since 1.0.0\n */\nasync function documentDir() {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'resolvePath',\n            path: '',\n            directory: BaseDirectory.Document\n        }\n    });\n}\n/**\n * Returns the path to the user's download directory.\n *\n * #### Platform-specific\n *\n * - **Linux**: Resolves to [`xdg-user-dirs`](https://www.freedesktop.org/wiki/Software/xdg-user-dirs/)' `XDG_DOWNLOAD_DIR`.\n * - **macOS**: Resolves to `$HOME/Downloads`.\n * - **Windows**: Resolves to `{FOLDERID_Downloads}`.\n * @example\n * ```typescript\n * import { downloadDir } from '@tauri-apps/api/path';\n * const downloadDirPath = await downloadDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function downloadDir() {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'resolvePath',\n            path: '',\n            directory: BaseDirectory.Download\n        }\n    });\n}\n/**\n * Returns the path to the user's executable directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to `$XDG_BIN_HOME/../bin` or `$XDG_DATA_HOME/../bin` or `$HOME/.local/bin`.\n * - **macOS:** Not supported.\n * - **Windows:** Not supported.\n * @example\n * ```typescript\n * import { executableDir } from '@tauri-apps/api/path';\n * const executableDirPath = await executableDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function executableDir() {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'resolvePath',\n            path: '',\n            directory: BaseDirectory.Executable\n        }\n    });\n}\n/**\n * Returns the path to the user's font directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to `$XDG_DATA_HOME/fonts` or `$HOME/.local/share/fonts`.\n * - **macOS:** Resolves to `$HOME/Library/Fonts`.\n * - **Windows:** Not supported.\n * @example\n * ```typescript\n * import { fontDir } from '@tauri-apps/api/path';\n * const fontDirPath = await fontDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function fontDir() {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'resolvePath',\n            path: '',\n            directory: BaseDirectory.Font\n        }\n    });\n}\n/**\n * Returns the path to the user's home directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to `$HOME`.\n * - **macOS:** Resolves to `$HOME`.\n * - **Windows:** Resolves to `{FOLDERID_Profile}`.\n * @example\n * ```typescript\n * import { homeDir } from '@tauri-apps/api/path';\n * const homeDirPath = await homeDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function homeDir() {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'resolvePath',\n            path: '',\n            directory: BaseDirectory.Home\n        }\n    });\n}\n/**\n * Returns the path to the user's local data directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to `$XDG_DATA_HOME` or `$HOME/.local/share`.\n * - **macOS:** Resolves to `$HOME/Library/Application Support`.\n * - **Windows:** Resolves to `{FOLDERID_LocalAppData}`.\n * @example\n * ```typescript\n * import { localDataDir } from '@tauri-apps/api/path';\n * const localDataDirPath = await localDataDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function localDataDir() {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'resolvePath',\n            path: '',\n            directory: BaseDirectory.LocalData\n        }\n    });\n}\n/**\n * Returns the path to the user's picture directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to [`xdg-user-dirs`](https://www.freedesktop.org/wiki/Software/xdg-user-dirs/)' `XDG_PICTURES_DIR`.\n * - **macOS:** Resolves to `$HOME/Pictures`.\n * - **Windows:** Resolves to `{FOLDERID_Pictures}`.\n * @example\n * ```typescript\n * import { pictureDir } from '@tauri-apps/api/path';\n * const pictureDirPath = await pictureDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function pictureDir() {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'resolvePath',\n            path: '',\n            directory: BaseDirectory.Picture\n        }\n    });\n}\n/**\n * Returns the path to the user's public directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to [`xdg-user-dirs`](https://www.freedesktop.org/wiki/Software/xdg-user-dirs/)' `XDG_PUBLICSHARE_DIR`.\n * - **macOS:** Resolves to `$HOME/Public`.\n * - **Windows:** Resolves to `{FOLDERID_Public}`.\n * @example\n * ```typescript\n * import { publicDir } from '@tauri-apps/api/path';\n * const publicDirPath = await publicDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function publicDir() {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'resolvePath',\n            path: '',\n            directory: BaseDirectory.Public\n        }\n    });\n}\n/**\n * Returns the path to the application's resource directory.\n * To resolve a resource path, see the [[resolveResource | `resolveResource API`]].\n * @example\n * ```typescript\n * import { resourceDir } from '@tauri-apps/api/path';\n * const resourceDirPath = await resourceDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function resourceDir() {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'resolvePath',\n            path: '',\n            directory: BaseDirectory.Resource\n        }\n    });\n}\n/**\n * Resolve the path to a resource file.\n * @example\n * ```typescript\n * import { resolveResource } from '@tauri-apps/api/path';\n * const resourcePath = await resolveResource('script.sh');\n * ```\n *\n * @param resourcePath The path to the resource.\n * Must follow the same syntax as defined in `tauri.conf.json > tauri > bundle > resources`, i.e. keeping subfolders and parent dir components (`../`).\n * @returns The full path to the resource.\n *\n * @since 1.0.0\n */\nasync function resolveResource(resourcePath) {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'resolvePath',\n            path: resourcePath,\n            directory: BaseDirectory.Resource\n        }\n    });\n}\n/**\n * Returns the path to the user's runtime directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to `$XDG_RUNTIME_DIR`.\n * - **macOS:** Not supported.\n * - **Windows:** Not supported.\n * @example\n * ```typescript\n * import { runtimeDir } from '@tauri-apps/api/path';\n * const runtimeDirPath = await runtimeDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function runtimeDir() {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'resolvePath',\n            path: '',\n            directory: BaseDirectory.Runtime\n        }\n    });\n}\n/**\n * Returns the path to the user's template directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to [`xdg-user-dirs`](https://www.freedesktop.org/wiki/Software/xdg-user-dirs/)' `XDG_TEMPLATES_DIR`.\n * - **macOS:** Not supported.\n * - **Windows:** Resolves to `{FOLDERID_Templates}`.\n * @example\n * ```typescript\n * import { templateDir } from '@tauri-apps/api/path';\n * const templateDirPath = await templateDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function templateDir() {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'resolvePath',\n            path: '',\n            directory: BaseDirectory.Template\n        }\n    });\n}\n/**\n * Returns the path to the user's video directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to [`xdg-user-dirs`](https://www.freedesktop.org/wiki/Software/xdg-user-dirs/)' `XDG_VIDEOS_DIR`.\n * - **macOS:** Resolves to `$HOME/Movies`.\n * - **Windows:** Resolves to `{FOLDERID_Videos}`.\n * @example\n * ```typescript\n * import { videoDir } from '@tauri-apps/api/path';\n * const videoDirPath = await videoDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function videoDir() {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'resolvePath',\n            path: '',\n            directory: BaseDirectory.Video\n        }\n    });\n}\n/**\n * Returns the path to the suggested log directory.\n *\n * @deprecated since 1.2.0: Will be removed in 2.0.0. Use {@link appLogDir} instead.\n * @since 1.0.0\n */\nasync function logDir() {\n    return appLogDir();\n}\n/**\n * Returns the path to the suggested directory for your app's log files.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to `${configDir}/${bundleIdentifier}/logs`.\n * - **macOS:** Resolves to `${homeDir}/Library/Logs/{bundleIdentifier}`\n * - **Windows:** Resolves to `${configDir}/${bundleIdentifier}/logs`.\n * @example\n * ```typescript\n * import { appLogDir } from '@tauri-apps/api/path';\n * const appLogDirPath = await appLogDir();\n * ```\n *\n * @since 1.2.0\n */\nasync function appLogDir() {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'resolvePath',\n            path: '',\n            directory: BaseDirectory.AppLog\n        }\n    });\n}\n/**\n * Provides the platform-specific path segment separator:\n * - `\\` on Windows\n * - `/` on POSIX\n *\n * @since 1.0.0\n */\nconst sep = isWindows() ? '\\\\' : '/';\n/**\n * Provides the platform-specific path segment delimiter:\n * - `;` on Windows\n * - `:` on POSIX\n *\n * @since 1.0.0\n */\nconst delimiter = isWindows() ? ';' : ':';\n/**\n * Resolves a sequence of `paths` or `path` segments into an absolute path.\n * @example\n * ```typescript\n * import { resolve, appDataDir } from '@tauri-apps/api/path';\n * const appDataDirPath = await appDataDir();\n * const path = await resolve(appDataDirPath, '..', 'users', 'tauri', 'avatar.png');\n * ```\n *\n * @since 1.0.0\n */\nasync function resolve(...paths) {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'resolve',\n            paths\n        }\n    });\n}\n/**\n * Normalizes the given `path`, resolving `'..'` and `'.'` segments and resolve symbolic links.\n * @example\n * ```typescript\n * import { normalize, appDataDir } from '@tauri-apps/api/path';\n * const appDataDirPath = await appDataDir();\n * const path = await normalize(appDataDirPath, '..', 'users', 'tauri', 'avatar.png');\n * ```\n *\n * @since 1.0.0\n */\nasync function normalize(path) {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'normalize',\n            path\n        }\n    });\n}\n/**\n *  Joins all given `path` segments together using the platform-specific separator as a delimiter, then normalizes the resulting path.\n * @example\n * ```typescript\n * import { join, appDataDir } from '@tauri-apps/api/path';\n * const appDataDirPath = await appDataDir();\n * const path = await join(appDataDirPath, 'users', 'tauri', 'avatar.png');\n * ```\n *\n * @since 1.0.0\n */\nasync function join(...paths) {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'join',\n            paths\n        }\n    });\n}\n/**\n * Returns the directory name of a `path`. Trailing directory separators are ignored.\n * @example\n * ```typescript\n * import { dirname, appDataDir } from '@tauri-apps/api/path';\n * const appDataDirPath = await appDataDir();\n * const dir = await dirname(appDataDirPath);\n * ```\n *\n * @since 1.0.0\n */\nasync function dirname(path) {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'dirname',\n            path\n        }\n    });\n}\n/**\n * Returns the extension of the `path`.\n * @example\n * ```typescript\n * import { extname, resolveResource } from '@tauri-apps/api/path';\n * const resourcePath = await resolveResource('app.conf');\n * const ext = await extname(resourcePath);\n * assert(ext === 'conf');\n * ```\n *\n * @since 1.0.0\n */\nasync function extname(path) {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'extname',\n            path\n        }\n    });\n}\n/**\n * Returns the last portion of a `path`. Trailing directory separators are ignored.\n * @example\n * ```typescript\n * import { basename, resolveResource } from '@tauri-apps/api/path';\n * const resourcePath = await resolveResource('app.conf');\n * const base = await basename(resourcePath);\n * assert(base === 'app.conf');\n * ```\n *\n * @param ext An optional file extension to be removed from the returned path.\n *\n * @since 1.0.0\n */\nasync function basename(path, ext) {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'basename',\n            path,\n            ext\n        }\n    });\n}\n/**\n * Returns whether the path is absolute or not.\n * @example\n * ```typescript\n * import { isAbsolute } from '@tauri-apps/api/path';\n * assert(await isAbsolute('/home/tauri'));\n * ```\n *\n * @since 1.0.0\n */\nasync function isAbsolute(path) {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'isAbsolute',\n            path\n        }\n    });\n}\n\nexport { BaseDirectory, appCacheDir, appConfigDir, appDataDir, appDir, appLocalDataDir, appLogDir, audioDir, basename, cacheDir, configDir, dataDir, delimiter, desktopDir, dirname, documentDir, downloadDir, executableDir, extname, fontDir, homeDir, isAbsolute, join, localDataDir, logDir, normalize, pictureDir, publicDir, resolve, resolveResource, resourceDir, runtimeDir, sep, templateDir, videoDir };\n", "// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/** @ignore */\nfunction isWindows() {\n    return navigator.appVersion.includes('Win');\n}\n\nexport { isWindows };\n", "import { invokeTauriCommand } from './helpers/tauri.js';\n\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * Perform operations on the current process.\n *\n * This package is also accessible with `window.__TAURI__.process` when [`build.withGlobalTauri`](https://tauri.app/v1/api/config/#buildconfig.withglobaltauri) in `tauri.conf.json` is set to `true`.\n * @module\n */\n/**\n * Exits immediately with the given `exitCode`.\n * @example\n * ```typescript\n * import { exit } from '@tauri-apps/api/process';\n * await exit(1);\n * ```\n *\n * @param exitCode The exit code to use.\n * @returns A promise indicating the success or failure of the operation.\n *\n * @since 1.0.0\n */\nasync function exit(exitCode = 0) {\n    return invokeTauriCommand({\n        __tauriModule: 'Process',\n        message: {\n            cmd: 'exit',\n            exitCode\n        }\n    });\n}\n/**\n * Exits the current instance of the app then relaunches it.\n * @example\n * ```typescript\n * import { relaunch } from '@tauri-apps/api/process';\n * await relaunch();\n * ```\n *\n * @returns A promise indicating the success or failure of the operation.\n *\n * @since 1.0.0\n */\nasync function relaunch() {\n    return invokeTauriCommand({\n        __tauriModule: 'Process',\n        message: {\n            cmd: 'relaunch'\n        }\n    });\n}\n\nexport { exit, relaunch };\n", "import { invokeTauriCommand } from './helpers/tauri.js';\nimport { transformCallback } from './tauri.js';\n\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * Access the system shell.\n * Allows you to spawn child processes and manage files and URLs using their default application.\n *\n * This package is also accessible with `window.__TAURI__.shell` when [`build.withGlobalTauri`](https://tauri.app/v1/api/config/#buildconfig.withglobaltauri) in `tauri.conf.json` is set to `true`.\n *\n * The APIs must be added to [`tauri.allowlist.shell`](https://tauri.app/v1/api/config/#allowlistconfig.shell) in `tauri.conf.json`:\n * ```json\n * {\n *   \"tauri\": {\n *     \"allowlist\": {\n *       \"shell\": {\n *         \"all\": true, // enable all shell APIs\n *         \"execute\": true, // enable process spawn APIs\n *         \"sidecar\": true, // enable spawning sidecars\n *         \"open\": true // enable opening files/URLs using the default program\n *       }\n *     }\n *   }\n * }\n * ```\n * It is recommended to allowlist only the APIs you use for optimal bundle size and security.\n *\n * ## Security\n *\n * This API has a scope configuration that forces you to restrict the programs and arguments that can be used.\n *\n * ### Restricting access to the {@link open | `open`} API\n *\n * On the allowlist, `open: true` means that the {@link open} API can be used with any URL,\n * as the argument is validated with the `^((mailto:\\w+)|(tel:\\w+)|(https?://\\w+)).+` regex.\n * You can change that regex by changing the boolean value to a string, e.g. `open: ^https://github.com/`.\n *\n * ### Restricting access to the {@link Command | `Command`} APIs\n *\n * The `shell` allowlist object has a `scope` field that defines an array of CLIs that can be used.\n * Each CLI is a configuration object `{ name: string, cmd: string, sidecar?: bool, args?: boolean | Arg[] }`.\n *\n * - `name`: the unique identifier of the command, passed to the {@link Command.constructor | Command constructor}.\n * If it's a sidecar, this must be the value defined on `tauri.conf.json > tauri > bundle > externalBin`.\n * - `cmd`: the program that is executed on this configuration. If it's a sidecar, this value is ignored.\n * - `sidecar`: whether the object configures a sidecar or a system program.\n * - `args`: the arguments that can be passed to the program. By default no arguments are allowed.\n *   - `true` means that any argument list is allowed.\n *   - `false` means that no arguments are allowed.\n *   - otherwise an array can be configured. Each item is either a string representing the fixed argument value\n *     or a `{ validator: string }` that defines a regex validating the argument value.\n *\n * #### Example scope configuration\n *\n * CLI: `git commit -m \"the commit message\"`\n *\n * Configuration:\n * ```json\n * {\n *   \"scope\": [\n *     {\n *       \"name\": \"run-git-commit\",\n *       \"cmd\": \"git\",\n *       \"args\": [\"commit\", \"-m\", { \"validator\": \"\\\\S+\" }]\n *     }\n *   ]\n * }\n * ```\n * Usage:\n * ```typescript\n * import { Command } from '@tauri-apps/api/shell'\n * new Command('run-git-commit', ['commit', '-m', 'the commit message'])\n * ```\n *\n * Trying to execute any API with a program not configured on the scope results in a promise rejection due to denied access.\n *\n * @module\n */\n/**\n * Spawns a process.\n *\n * @ignore\n * @param program The name of the scoped command.\n * @param onEvent Event handler.\n * @param args Program arguments.\n * @param options Configuration for the process spawn.\n * @returns A promise resolving to the process id.\n */\nasync function execute(onEvent, program, args = [], options) {\n    if (typeof args === 'object') {\n        Object.freeze(args);\n    }\n    return invokeTauriCommand({\n        __tauriModule: 'Shell',\n        message: {\n            cmd: 'execute',\n            program,\n            args,\n            options,\n            onEventFn: transformCallback(onEvent)\n        }\n    });\n}\n/**\n * @since 1.0.0\n */\nclass EventEmitter {\n    constructor() {\n        /** @ignore */\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        this.eventListeners = Object.create(null);\n    }\n    /**\n     * Alias for `emitter.on(eventName, listener)`.\n     *\n     * @since 1.1.0\n     */\n    addListener(eventName, listener) {\n        return this.on(eventName, listener);\n    }\n    /**\n     * Alias for `emitter.off(eventName, listener)`.\n     *\n     * @since 1.1.0\n     */\n    removeListener(eventName, listener) {\n        return this.off(eventName, listener);\n    }\n    /**\n     * Adds the `listener` function to the end of the listeners array for the\n     * event named `eventName`. No checks are made to see if the `listener` has\n     * already been added. Multiple calls passing the same combination of `eventName`and `listener` will result in the `listener` being added, and called, multiple\n     * times.\n     *\n     * Returns a reference to the `EventEmitter`, so that calls can be chained.\n     *\n     * @since 1.0.0\n     */\n    on(eventName, listener) {\n        if (eventName in this.eventListeners) {\n            // eslint-disable-next-line security/detect-object-injection\n            this.eventListeners[eventName].push(listener);\n        }\n        else {\n            // eslint-disable-next-line security/detect-object-injection\n            this.eventListeners[eventName] = [listener];\n        }\n        return this;\n    }\n    /**\n     * Adds a **one-time**`listener` function for the event named `eventName`. The\n     * next time `eventName` is triggered, this listener is removed and then invoked.\n     *\n     * Returns a reference to the `EventEmitter`, so that calls can be chained.\n     *\n     * @since 1.1.0\n     */\n    once(eventName, listener) {\n        const wrapper = (...args) => {\n            this.removeListener(eventName, wrapper);\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            listener(...args);\n        };\n        return this.addListener(eventName, wrapper);\n    }\n    /**\n     * Removes the all specified listener from the listener array for the event eventName\n     * Returns a reference to the `EventEmitter`, so that calls can be chained.\n     *\n     * @since 1.1.0\n     */\n    off(eventName, listener) {\n        if (eventName in this.eventListeners) {\n            // eslint-disable-next-line security/detect-object-injection\n            this.eventListeners[eventName] = this.eventListeners[eventName].filter((l) => l !== listener);\n        }\n        return this;\n    }\n    /**\n     * Removes all listeners, or those of the specified eventName.\n     *\n     * Returns a reference to the `EventEmitter`, so that calls can be chained.\n     *\n     * @since 1.1.0\n     */\n    removeAllListeners(event) {\n        if (event) {\n            // eslint-disable-next-line @typescript-eslint/no-dynamic-delete,security/detect-object-injection\n            delete this.eventListeners[event];\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            this.eventListeners = Object.create(null);\n        }\n        return this;\n    }\n    /**\n     * @ignore\n     * Synchronously calls each of the listeners registered for the event named`eventName`, in the order they were registered, passing the supplied arguments\n     * to each.\n     *\n     * @returns `true` if the event had listeners, `false` otherwise.\n     */\n    emit(eventName, ...args) {\n        if (eventName in this.eventListeners) {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,security/detect-object-injection\n            const listeners = this.eventListeners[eventName];\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            for (const listener of listeners)\n                listener(...args);\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Returns the number of listeners listening to the event named `eventName`.\n     *\n     * @since 1.1.0\n     */\n    listenerCount(eventName) {\n        if (eventName in this.eventListeners)\n            // eslint-disable-next-line security/detect-object-injection\n            return this.eventListeners[eventName].length;\n        return 0;\n    }\n    /**\n     * Adds the `listener` function to the _beginning_ of the listeners array for the\n     * event named `eventName`. No checks are made to see if the `listener` has\n     * already been added. Multiple calls passing the same combination of `eventName`and `listener` will result in the `listener` being added, and called, multiple\n     * times.\n     *\n     * Returns a reference to the `EventEmitter`, so that calls can be chained.\n     *\n     * @since 1.1.0\n     */\n    prependListener(eventName, listener) {\n        if (eventName in this.eventListeners) {\n            // eslint-disable-next-line security/detect-object-injection\n            this.eventListeners[eventName].unshift(listener);\n        }\n        else {\n            // eslint-disable-next-line security/detect-object-injection\n            this.eventListeners[eventName] = [listener];\n        }\n        return this;\n    }\n    /**\n     * Adds a **one-time**`listener` function for the event named `eventName` to the_beginning_ of the listeners array. The next time `eventName` is triggered, this\n     * listener is removed, and then invoked.\n     *\n     * Returns a reference to the `EventEmitter`, so that calls can be chained.\n     *\n     * @since 1.1.0\n     */\n    prependOnceListener(eventName, listener) {\n        const wrapper = (...args) => {\n            this.removeListener(eventName, wrapper);\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            listener(...args);\n        };\n        return this.prependListener(eventName, wrapper);\n    }\n}\n/**\n * @since 1.1.0\n */\nclass Child {\n    constructor(pid) {\n        this.pid = pid;\n    }\n    /**\n     * Writes `data` to the `stdin`.\n     *\n     * @param data The message to write, either a string or a byte array.\n     * @example\n     * ```typescript\n     * import { Command } from '@tauri-apps/api/shell';\n     * const command = new Command('node');\n     * const child = await command.spawn();\n     * await child.write('message');\n     * await child.write([0, 1, 2, 3, 4, 5]);\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async write(data) {\n        return invokeTauriCommand({\n            __tauriModule: 'Shell',\n            message: {\n                cmd: 'stdinWrite',\n                pid: this.pid,\n                // correctly serialize Uint8Arrays\n                buffer: typeof data === 'string' ? data : Array.from(data)\n            }\n        });\n    }\n    /**\n     * Kills the child process.\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async kill() {\n        return invokeTauriCommand({\n            __tauriModule: 'Shell',\n            message: {\n                cmd: 'killChild',\n                pid: this.pid\n            }\n        });\n    }\n}\n/**\n * The entry point for spawning child processes.\n * It emits the `close` and `error` events.\n * @example\n * ```typescript\n * import { Command } from '@tauri-apps/api/shell';\n * const command = new Command('node');\n * command.on('close', data => {\n *   console.log(`command finished with code ${data.code} and signal ${data.signal}`)\n * });\n * command.on('error', error => console.error(`command error: \"${error}\"`));\n * command.stdout.on('data', line => console.log(`command stdout: \"${line}\"`));\n * command.stderr.on('data', line => console.log(`command stderr: \"${line}\"`));\n *\n * const child = await command.spawn();\n * console.log('pid:', child.pid);\n * ```\n *\n * @since 1.1.0\n *\n */\nclass Command extends EventEmitter {\n    /**\n     * Creates a new `Command` instance.\n     *\n     * @param program The program name to execute.\n     * It must be configured on `tauri.conf.json > tauri > allowlist > shell > scope`.\n     * @param args Program arguments.\n     * @param options Spawn options.\n     */\n    constructor(program, args = [], options) {\n        super();\n        /** Event emitter for the `stdout`. Emits the `data` event. */\n        this.stdout = new EventEmitter();\n        /** Event emitter for the `stderr`. Emits the `data` event. */\n        this.stderr = new EventEmitter();\n        this.program = program;\n        this.args = typeof args === 'string' ? [args] : args;\n        this.options = options ?? {};\n    }\n    /**\n     * Creates a command to execute the given sidecar program.\n     * @example\n     * ```typescript\n     * import { Command } from '@tauri-apps/api/shell';\n     * const command = Command.sidecar('my-sidecar');\n     * const output = await command.execute();\n     * ```\n     *\n     * @param program The program to execute.\n     * It must be configured on `tauri.conf.json > tauri > allowlist > shell > scope`.\n     */\n    static sidecar(program, args = [], options) {\n        const instance = new Command(program, args, options);\n        instance.options.sidecar = true;\n        return instance;\n    }\n    /**\n     * Executes the command as a child process, returning a handle to it.\n     *\n     * @returns A promise resolving to the child process handle.\n     */\n    async spawn() {\n        return execute((event) => {\n            switch (event.event) {\n                case 'Error':\n                    this.emit('error', event.payload);\n                    break;\n                case 'Terminated':\n                    this.emit('close', event.payload);\n                    break;\n                case 'Stdout':\n                    this.stdout.emit('data', event.payload);\n                    break;\n                case 'Stderr':\n                    this.stderr.emit('data', event.payload);\n                    break;\n            }\n        }, this.program, this.args, this.options).then((pid) => new Child(pid));\n    }\n    /**\n     * Executes the command as a child process, waiting for it to finish and collecting all of its output.\n     * @example\n     * ```typescript\n     * import { Command } from '@tauri-apps/api/shell';\n     * const output = await new Command('echo', 'message').execute();\n     * assert(output.code === 0);\n     * assert(output.signal === null);\n     * assert(output.stdout === 'message');\n     * assert(output.stderr === '');\n     * ```\n     *\n     * @returns A promise resolving to the child process output.\n     */\n    async execute() {\n        return new Promise((resolve, reject) => {\n            this.on('error', reject);\n            const stdout = [];\n            const stderr = [];\n            this.stdout.on('data', (line) => {\n                stdout.push(line);\n            });\n            this.stderr.on('data', (line) => {\n                stderr.push(line);\n            });\n            this.on('close', (payload) => {\n                resolve({\n                    code: payload.code,\n                    signal: payload.signal,\n                    stdout: stdout.join('\\n'),\n                    stderr: stderr.join('\\n')\n                });\n            });\n            this.spawn().catch(reject);\n        });\n    }\n}\n/**\n * Opens a path or URL with the system's default app,\n * or the one specified with `openWith`.\n *\n * The `openWith` value must be one of `firefox`, `google chrome`, `chromium` `safari`,\n * `open`, `start`, `xdg-open`, `gio`, `gnome-open`, `kde-open` or `wslview`.\n *\n * @example\n * ```typescript\n * import { open } from '@tauri-apps/api/shell';\n * // opens the given URL on the default browser:\n * await open('https://github.com/tauri-apps/tauri');\n * // opens the given URL using `firefox`:\n * await open('https://github.com/tauri-apps/tauri', 'firefox');\n * // opens a file using the default program:\n * await open('/path/to/file');\n * ```\n *\n * @param path The path or URL to open.\n * This value is matched against the string regex defined on `tauri.conf.json > tauri > allowlist > shell > open`,\n * which defaults to `^((mailto:\\w+)|(tel:\\w+)|(https?://\\w+)).+`.\n * @param openWith The app to open the file or URL with.\n * Defaults to the system default application for the specified path type.\n *\n * @since 1.0.0\n */\nasync function open(path, openWith) {\n    return invokeTauriCommand({\n        __tauriModule: 'Shell',\n        message: {\n            cmd: 'open',\n            path,\n            with: openWith\n        }\n    });\n}\n\nexport { Child, Command, EventEmitter, open };\n", "import { listen, TauriEvent, emit, once } from './event.js';\n\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * Customize the auto updater flow.\n *\n * This package is also accessible with `window.__TAURI__.updater` when [`build.withGlobalTauri`](https://tauri.app/v1/api/config/#buildconfig.withglobaltauri) in `tauri.conf.json` is set to `true`.\n * @module\n */\n/**\n * Listen to an updater event.\n * @example\n * ```typescript\n * import { onUpdaterEvent } from \"@tauri-apps/api/updater\";\n * const unlisten = await onUpdaterEvent(({ error, status }) => {\n *  console.log('Updater event', error, status);\n * });\n *\n * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n * unlisten();\n * ```\n *\n * @returns A promise resolving to a function to unlisten to the event.\n * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n *\n * @since 1.0.2\n */\nasync function onUpdaterEvent(handler) {\n    return listen(TauriEvent.STATUS_UPDATE, (data) => {\n        handler(data?.payload);\n    });\n}\n/**\n * Install the update if there's one available.\n * @example\n * ```typescript\n * import { checkUpdate, installUpdate } from '@tauri-apps/api/updater';\n * const update = await checkUpdate();\n * if (update.shouldUpdate) {\n *   console.log(`Installing update ${update.manifest?.version}, ${update.manifest?.date}, ${update.manifest.body}`);\n *   await installUpdate();\n * }\n * ```\n *\n * @return A promise indicating the success or failure of the operation.\n *\n * @since 1.0.0\n */\nasync function installUpdate() {\n    let unlistenerFn;\n    function cleanListener() {\n        if (unlistenerFn) {\n            unlistenerFn();\n        }\n        unlistenerFn = undefined;\n    }\n    return new Promise((resolve, reject) => {\n        function onStatusChange(statusResult) {\n            if (statusResult.error) {\n                cleanListener();\n                reject(statusResult.error);\n                return;\n            }\n            // install complete\n            if (statusResult.status === 'DONE') {\n                cleanListener();\n                resolve();\n            }\n        }\n        // listen status change\n        onUpdaterEvent(onStatusChange)\n            .then((fn) => {\n            unlistenerFn = fn;\n        })\n            .catch((e) => {\n            cleanListener();\n            // dispatch the error to our checkUpdate\n            throw e;\n        });\n        // start the process we dont require much security as it's\n        // handled by rust\n        emit(TauriEvent.INSTALL_UPDATE).catch((e) => {\n            cleanListener();\n            // dispatch the error to our checkUpdate\n            throw e;\n        });\n    });\n}\n/**\n * Checks if an update is available.\n * @example\n * ```typescript\n * import { checkUpdate } from '@tauri-apps/api/updater';\n * const update = await checkUpdate();\n * // now run installUpdate() if needed\n * ```\n *\n * @return Promise resolving to the update status.\n *\n * @since 1.0.0\n */\nasync function checkUpdate() {\n    let unlistenerFn;\n    function cleanListener() {\n        if (unlistenerFn) {\n            unlistenerFn();\n        }\n        unlistenerFn = undefined;\n    }\n    return new Promise((resolve, reject) => {\n        function onUpdateAvailable(manifest) {\n            cleanListener();\n            resolve({\n                manifest,\n                shouldUpdate: true\n            });\n        }\n        function onStatusChange(statusResult) {\n            if (statusResult.error) {\n                cleanListener();\n                reject(statusResult.error);\n                return;\n            }\n            if (statusResult.status === 'UPTODATE') {\n                cleanListener();\n                resolve({\n                    shouldUpdate: false\n                });\n            }\n        }\n        // wait to receive the latest update\n        once(TauriEvent.UPDATE_AVAILABLE, (data) => {\n            onUpdateAvailable(data?.payload);\n        }).catch((e) => {\n            cleanListener();\n            // dispatch the error to our checkUpdate\n            throw e;\n        });\n        // listen status change\n        onUpdaterEvent(onStatusChange)\n            .then((fn) => {\n            unlistenerFn = fn;\n        })\n            .catch((e) => {\n            cleanListener();\n            // dispatch the error to our checkUpdate\n            throw e;\n        });\n        // start the process\n        emit(TauriEvent.CHECK_UPDATE).catch((e) => {\n            cleanListener();\n            // dispatch the error to our checkUpdate\n            throw e;\n        });\n    });\n}\n\nexport { checkUpdate, installUpdate, onUpdaterEvent };\n", "import { invokeTauriCommand } from './helpers/tauri.js';\nimport { listen, once, emit } from './helpers/event.js';\nimport { TauriEvent } from './event.js';\n\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * Provides APIs to create windows, communicate with other windows and manipulate the current window.\n *\n * This package is also accessible with `window.__TAURI__.window` when [`build.withGlobalTauri`](https://tauri.app/v1/api/config/#buildconfig.withglobaltauri) in `tauri.conf.json` is set to `true`.\n *\n * The APIs must be added to [`tauri.allowlist.window`](https://tauri.app/v1/api/config/#allowlistconfig.window) in `tauri.conf.json`:\n * ```json\n * {\n *   \"tauri\": {\n *     \"allowlist\": {\n *       \"window\": {\n *         \"all\": true, // enable all window APIs\n *         \"create\": true, // enable window creation\n *         \"center\": true,\n *         \"requestUserAttention\": true,\n *         \"setResizable\": true,\n *         \"setMaximizable\": true,\n *         \"setMinimizable\": true,\n *         \"setClosable\": true,\n *         \"setTitle\": true,\n *         \"maximize\": true,\n *         \"unmaximize\": true,\n *         \"minimize\": true,\n *         \"unminimize\": true,\n *         \"show\": true,\n *         \"hide\": true,\n *         \"close\": true,\n *         \"setDecorations\": true,\n *         \"setAlwaysOnTop\": true,\n *         \"setContentProtected\": true,\n *         \"setSize\": true,\n *         \"setMinSize\": true,\n *         \"setMaxSize\": true,\n *         \"setPosition\": true,\n *         \"setFullscreen\": true,\n *         \"setFocus\": true,\n *         \"setIcon\": true,\n *         \"setSkipTaskbar\": true,\n *         \"setCursorGrab\": true,\n *         \"setCursorVisible\": true,\n *         \"setCursorIcon\": true,\n *         \"setCursorPosition\": true,\n *         \"setIgnoreCursorEvents\": true,\n *         \"startDragging\": true,\n *         \"print\": true\n *       }\n *     }\n *   }\n * }\n * ```\n * It is recommended to allowlist only the APIs you use for optimal bundle size and security.\n *\n * ## Window events\n *\n * Events can be listened to using `appWindow.listen`:\n * ```typescript\n * import { appWindow } from \"@tauri-apps/api/window\";\n * appWindow.listen(\"my-window-event\", ({ event, payload }) => { });\n * ```\n *\n * @module\n */\n/**\n * A size represented in logical pixels.\n *\n * @since 1.0.0\n */\nclass LogicalSize {\n    constructor(width, height) {\n        this.type = 'Logical';\n        this.width = width;\n        this.height = height;\n    }\n}\n/**\n * A size represented in physical pixels.\n *\n * @since 1.0.0\n */\nclass PhysicalSize {\n    constructor(width, height) {\n        this.type = 'Physical';\n        this.width = width;\n        this.height = height;\n    }\n    /**\n     * Converts the physical size to a logical one.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * const factor = await appWindow.scaleFactor();\n     * const size = await appWindow.innerSize();\n     * const logical = size.toLogical(factor);\n     * ```\n     *  */\n    toLogical(scaleFactor) {\n        return new LogicalSize(this.width / scaleFactor, this.height / scaleFactor);\n    }\n}\n/**\n *  A position represented in logical pixels.\n *\n * @since 1.0.0\n */\nclass LogicalPosition {\n    constructor(x, y) {\n        this.type = 'Logical';\n        this.x = x;\n        this.y = y;\n    }\n}\n/**\n *  A position represented in physical pixels.\n *\n * @since 1.0.0\n */\nclass PhysicalPosition {\n    constructor(x, y) {\n        this.type = 'Physical';\n        this.x = x;\n        this.y = y;\n    }\n    /**\n     * Converts the physical position to a logical one.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * const factor = await appWindow.scaleFactor();\n     * const position = await appWindow.innerPosition();\n     * const logical = position.toLogical(factor);\n     * ```\n     * */\n    toLogical(scaleFactor) {\n        return new LogicalPosition(this.x / scaleFactor, this.y / scaleFactor);\n    }\n}\n/**\n * Attention type to request on a window.\n *\n * @since 1.0.0\n */\nvar UserAttentionType;\n(function (UserAttentionType) {\n    /**\n     * #### Platform-specific\n     * - **macOS:** Bounces the dock icon until the application is in focus.\n     * - **Windows:** Flashes both the window and the taskbar button until the application is in focus.\n     */\n    UserAttentionType[UserAttentionType[\"Critical\"] = 1] = \"Critical\";\n    /**\n     * #### Platform-specific\n     * - **macOS:** Bounces the dock icon once.\n     * - **Windows:** Flashes the taskbar button until the application is in focus.\n     */\n    UserAttentionType[UserAttentionType[\"Informational\"] = 2] = \"Informational\";\n})(UserAttentionType || (UserAttentionType = {}));\n/**\n * Get an instance of `WebviewWindow` for the current webview window.\n *\n * @since 1.0.0\n */\nfunction getCurrent() {\n    return new WebviewWindow(window.__TAURI_METADATA__.__currentWindow.label, {\n        // @ts-expect-error `skip` is not defined in the public API but it is handled by the constructor\n        skip: true\n    });\n}\n/**\n * Gets a list of instances of `WebviewWindow` for all available webview windows.\n *\n * @since 1.0.0\n */\nfunction getAll() {\n    return window.__TAURI_METADATA__.__windows.map((w) => new WebviewWindow(w.label, {\n        // @ts-expect-error `skip` is not defined in the public API but it is handled by the constructor\n        skip: true\n    }));\n}\n/** @ignore */\n// events that are emitted right here instead of by the created webview\nconst localTauriEvents = ['tauri://created', 'tauri://error'];\n/**\n * A webview window handle allows emitting and listening to events from the backend that are tied to the window.\n *\n * @ignore\n * @since 1.0.0\n */\nclass WebviewWindowHandle {\n    constructor(label) {\n        this.label = label;\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        this.listeners = Object.create(null);\n    }\n    /**\n     * Listen to an event emitted by the backend or webview.\n     * The event must either be a global event or an event targetting this window.\n     *\n     * See {@link WebviewWindow.emit | `emit`} for more information.\n     *\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * const unlisten = await appWindow.listen<string>('state-changed', (event) => {\n     *   console.log(`Got error: ${payload}`);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     *\n     * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n     * @param handler Event handler.\n     * @returns A promise resolving to a function to unlisten to the event.\n     */\n    async listen(event, handler) {\n        if (this._handleTauriEvent(event, handler)) {\n            return Promise.resolve(() => {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, security/detect-object-injection\n                const listeners = this.listeners[event];\n                listeners.splice(listeners.indexOf(handler), 1);\n            });\n        }\n        return listen(event, this.label, handler);\n    }\n    /**\n     * Listen to an one-off event.\n     * See {@link WebviewWindow.listen | `listen`} for more information.\n     *\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * const unlisten = await appWindow.once<null>('initialized', (event) => {\n     *   console.log(`Window initialized!`);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     *\n     * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n     * @param handler Event handler.\n     * @returns A promise resolving to a function to unlisten to the event.\n     */\n    async once(event, handler) {\n        if (this._handleTauriEvent(event, handler)) {\n            return Promise.resolve(() => {\n                // eslint-disable-next-line security/detect-object-injection\n                const listeners = this.listeners[event];\n                listeners.splice(listeners.indexOf(handler), 1);\n            });\n        }\n        return once(event, this.label, handler);\n    }\n    /**\n     * Emits an event to the backend and all Tauri windows.\n     * The event will have this window's {@link WebviewWindow.label | label} as {@link Event.windowLabel | source window label}.\n     *\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.emit('window-loaded', { loggedIn: true, token: 'authToken' });\n     * ```\n     *\n     * This function can also be used to communicate between windows:\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.listen('sync-data', (event) => { });\n     *\n     * // on another window...\n     * import { WebviewWindow } from '@tauri-apps/api/window';\n     * const otherWindow = WebviewWindow.getByLabel('other')\n     * await otherWindow.emit('sync-data');\n     * ```\n     *\n     * Global listeners are also triggered:\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * import { listen } from '@tauri-apps/api/event';\n     * await listen('ping', (event) => { });\n     *\n     * await appWindow.emit('ping');\n     * ```\n     *\n     * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n     * @param payload Event payload.\n     */\n    async emit(event, payload) {\n        if (localTauriEvents.includes(event)) {\n            // eslint-disable-next-line\n            for (const handler of this.listeners[event] || []) {\n                handler({ event, id: -1, windowLabel: this.label, payload });\n            }\n            return Promise.resolve();\n        }\n        return emit(event, this.label, payload);\n    }\n    /** @ignore */\n    _handleTauriEvent(event, handler) {\n        if (localTauriEvents.includes(event)) {\n            if (!(event in this.listeners)) {\n                // eslint-disable-next-line\n                this.listeners[event] = [handler];\n            }\n            else {\n                // eslint-disable-next-line\n                this.listeners[event].push(handler);\n            }\n            return true;\n        }\n        return false;\n    }\n}\n/**\n * Manage the current window object.\n *\n * @ignore\n * @since 1.0.0\n */\nclass WindowManager extends WebviewWindowHandle {\n    // Getters\n    /**\n     * The scale factor that can be used to map physical pixels to logical pixels.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * const factor = await appWindow.scaleFactor();\n     * ```\n     *\n     * @returns The window's monitor scale factor.\n     * */\n    async scaleFactor() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'scaleFactor'\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * The position of the top-left hand corner of the window's client area relative to the top-left hand corner of the desktop.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * const position = await appWindow.innerPosition();\n     * ```\n     *\n     * @returns The window's inner position.\n     *  */\n    async innerPosition() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'innerPosition'\n                    }\n                }\n            }\n        }).then(({ x, y }) => new PhysicalPosition(x, y));\n    }\n    /**\n     * The position of the top-left hand corner of the window relative to the top-left hand corner of the desktop.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * const position = await appWindow.outerPosition();\n     * ```\n     *\n     * @returns The window's outer position.\n     *  */\n    async outerPosition() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'outerPosition'\n                    }\n                }\n            }\n        }).then(({ x, y }) => new PhysicalPosition(x, y));\n    }\n    /**\n     * The physical size of the window's client area.\n     * The client area is the content of the window, excluding the title bar and borders.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * const size = await appWindow.innerSize();\n     * ```\n     *\n     * @returns The window's inner size.\n     */\n    async innerSize() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'innerSize'\n                    }\n                }\n            }\n        }).then(({ width, height }) => new PhysicalSize(width, height));\n    }\n    /**\n     * The physical size of the entire window.\n     * These dimensions include the title bar and borders. If you don't want that (and you usually don't), use inner_size instead.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * const size = await appWindow.outerSize();\n     * ```\n     *\n     * @returns The window's outer size.\n     */\n    async outerSize() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'outerSize'\n                    }\n                }\n            }\n        }).then(({ width, height }) => new PhysicalSize(width, height));\n    }\n    /**\n     * Gets the window's current fullscreen state.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * const fullscreen = await appWindow.isFullscreen();\n     * ```\n     *\n     * @returns Whether the window is in fullscreen mode or not.\n     *  */\n    async isFullscreen() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'isFullscreen'\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Gets the window's current minimized state.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * const minimized = await appWindow.isMinimized();\n     * ```\n     *\n     * @since 1.3.0\n     * */\n    async isMinimized() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'isMinimized'\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Gets the window's current maximized state.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * const maximized = await appWindow.isMaximized();\n     * ```\n     *\n     * @returns Whether the window is maximized or not.\n     * */\n    async isMaximized() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'isMaximized'\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Gets the window's current focus state.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * const focused = await appWindow.isFocused();\n     * ```\n     *\n     * @returns Whether the window is focused or not.\n     *\n     * @since 1.4\n     * */\n    async isFocused() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'isFocused'\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Gets the window's current decorated state.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * const decorated = await appWindow.isDecorated();\n     * ```\n     *\n     * @returns Whether the window is decorated or not.\n     *  */\n    async isDecorated() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'isDecorated'\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Gets the window's current resizable state.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * const resizable = await appWindow.isResizable();\n     * ```\n     *\n     * @returns Whether the window is resizable or not.\n     *  */\n    async isResizable() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'isResizable'\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Gets the window’s native maximize button state.\n     *\n     * #### Platform-specific\n     *\n     * - **Linux / iOS / Android:** Unsupported.\n     *\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * const maximizable = await appWindow.isMaximizable();\n     * ```\n     *\n     * @returns Whether the window's native maximize button is enabled or not.\n     *  */\n    async isMaximizable() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'isMaximizable'\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Gets the window’s native minimize button state.\n     *\n     * #### Platform-specific\n     *\n     * - **Linux / iOS / Android:** Unsupported.\n     *\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * const minimizable = await appWindow.isMinimizable();\n     * ```\n     *\n     * @returns Whether the window's native minimize button is enabled or not.\n     *  */\n    async isMinimizable() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'isMinimizable'\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Gets the window’s native close button state.\n     *\n     * #### Platform-specific\n     *\n     * - **Linux / iOS / Android:** Unsupported.\n     *\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * const closable = await appWindow.isClosable();\n     * ```\n     *\n     * @returns Whether the window's native close button is enabled or not.\n     *  */\n    async isClosable() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'isClosable'\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Gets the window's current visible state.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * const visible = await appWindow.isVisible();\n     * ```\n     *\n     * @returns Whether the window is visible or not.\n     *  */\n    async isVisible() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'isVisible'\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Gets the window's current title.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * const title = await appWindow.title();\n     * ```\n     *\n     * @since 1.3.0\n     * */\n    async title() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'title'\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Gets the window's current theme.\n     *\n     * #### Platform-specific\n     *\n     * - **macOS:** Theme was introduced on macOS 10.14. Returns `light` on macOS 10.13 and below.\n     *\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * const theme = await appWindow.theme();\n     * ```\n     *\n     * @returns The window theme.\n     * */\n    async theme() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'theme'\n                    }\n                }\n            }\n        });\n    }\n    // Setters\n    /**\n     * Centers the window.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.center();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async center() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'center'\n                    }\n                }\n            }\n        });\n    }\n    /**\n     *  Requests user attention to the window, this has no effect if the application\n     * is already focused. How requesting for user attention manifests is platform dependent,\n     * see `UserAttentionType` for details.\n     *\n     * Providing `null` will unset the request for user attention. Unsetting the request for\n     * user attention might not be done automatically by the WM when the window receives input.\n     *\n     * #### Platform-specific\n     *\n     * - **macOS:** `null` has no effect.\n     * - **Linux:** Urgency levels have the same effect.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.requestUserAttention();\n     * ```\n     *\n     * @param requestType\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async requestUserAttention(requestType) {\n        let requestType_ = null;\n        if (requestType) {\n            if (requestType === UserAttentionType.Critical) {\n                requestType_ = { type: 'Critical' };\n            }\n            else {\n                requestType_ = { type: 'Informational' };\n            }\n        }\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'requestUserAttention',\n                        payload: requestType_\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Updates the window resizable flag.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.setResizable(false);\n     * ```\n     *\n     * @param resizable\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setResizable(resizable) {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'setResizable',\n                        payload: resizable\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Sets whether the window's native maximize button is enabled or not.\n     * If resizable is set to false, this setting is ignored.\n     *\n     * #### Platform-specific\n     *\n     * - **macOS:** Disables the \"zoom\" button in the window titlebar, which is also used to enter fullscreen mode.\n     * - **Linux / iOS / Android:** Unsupported.\n     *\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.setMaximizable(false);\n     * ```\n     *\n     * @param maximizable\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setMaximizable(maximizable) {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'setMaximizable',\n                        payload: maximizable\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Sets whether the window's native minimize button is enabled or not.\n     *\n     * #### Platform-specific\n     *\n     * - **Linux / iOS / Android:** Unsupported.\n     *\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.setMinimizable(false);\n     * ```\n     *\n     * @param minimizable\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setMinimizable(minimizable) {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'setMinimizable',\n                        payload: minimizable\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Sets whether the window's native close button is enabled or not.\n     *\n     * #### Platform-specific\n     *\n     * - **Linux:** GTK+ will do its best to convince the window manager not to show a close button. Depending on the system, this function may not have any effect when called on a window that is already visible\n     * - **iOS / Android:** Unsupported.\n     *\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.setClosable(false);\n     * ```\n     *\n     * @param closable\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setClosable(closable) {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'setClosable',\n                        payload: closable\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Sets the window title.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.setTitle('Tauri');\n     * ```\n     *\n     * @param title The new title\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setTitle(title) {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'setTitle',\n                        payload: title\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Maximizes the window.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.maximize();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async maximize() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'maximize'\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Unmaximizes the window.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.unmaximize();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async unmaximize() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'unmaximize'\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Toggles the window maximized state.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.toggleMaximize();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async toggleMaximize() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'toggleMaximize'\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Minimizes the window.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.minimize();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async minimize() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'minimize'\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Unminimizes the window.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.unminimize();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async unminimize() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'unminimize'\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Sets the window visibility to true.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.show();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async show() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'show'\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Sets the window visibility to false.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.hide();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async hide() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'hide'\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Closes the window.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.close();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async close() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'close'\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Whether the window should have borders and bars.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.setDecorations(false);\n     * ```\n     *\n     * @param decorations Whether the window should have borders and bars.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setDecorations(decorations) {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'setDecorations',\n                        payload: decorations\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Whether the window should always be on top of other windows.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.setAlwaysOnTop(true);\n     * ```\n     *\n     * @param alwaysOnTop Whether the window should always be on top of other windows or not.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setAlwaysOnTop(alwaysOnTop) {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'setAlwaysOnTop',\n                        payload: alwaysOnTop\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Prevents the window contents from being captured by other apps.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.setContentProtected(true);\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     *\n     * @since 1.2.0\n     */\n    async setContentProtected(protected_) {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'setContentProtected',\n                        payload: protected_\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Resizes the window with a new inner size.\n     * @example\n     * ```typescript\n     * import { appWindow, LogicalSize } from '@tauri-apps/api/window';\n     * await appWindow.setSize(new LogicalSize(600, 500));\n     * ```\n     *\n     * @param size The logical or physical inner size.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setSize(size) {\n        if (!size || (size.type !== 'Logical' && size.type !== 'Physical')) {\n            throw new Error('the `size` argument must be either a LogicalSize or a PhysicalSize instance');\n        }\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'setSize',\n                        payload: {\n                            type: size.type,\n                            data: {\n                                width: size.width,\n                                height: size.height\n                            }\n                        }\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Sets the window minimum inner size. If the `size` argument is not provided, the constraint is unset.\n     * @example\n     * ```typescript\n     * import { appWindow, PhysicalSize } from '@tauri-apps/api/window';\n     * await appWindow.setMinSize(new PhysicalSize(600, 500));\n     * ```\n     *\n     * @param size The logical or physical inner size, or `null` to unset the constraint.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setMinSize(size) {\n        if (size && size.type !== 'Logical' && size.type !== 'Physical') {\n            throw new Error('the `size` argument must be either a LogicalSize or a PhysicalSize instance');\n        }\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'setMinSize',\n                        payload: size\n                            ? {\n                                type: size.type,\n                                data: {\n                                    width: size.width,\n                                    height: size.height\n                                }\n                            }\n                            : null\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Sets the window maximum inner size. If the `size` argument is undefined, the constraint is unset.\n     * @example\n     * ```typescript\n     * import { appWindow, LogicalSize } from '@tauri-apps/api/window';\n     * await appWindow.setMaxSize(new LogicalSize(600, 500));\n     * ```\n     *\n     * @param size The logical or physical inner size, or `null` to unset the constraint.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setMaxSize(size) {\n        if (size && size.type !== 'Logical' && size.type !== 'Physical') {\n            throw new Error('the `size` argument must be either a LogicalSize or a PhysicalSize instance');\n        }\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'setMaxSize',\n                        payload: size\n                            ? {\n                                type: size.type,\n                                data: {\n                                    width: size.width,\n                                    height: size.height\n                                }\n                            }\n                            : null\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Sets the window outer position.\n     * @example\n     * ```typescript\n     * import { appWindow, LogicalPosition } from '@tauri-apps/api/window';\n     * await appWindow.setPosition(new LogicalPosition(600, 500));\n     * ```\n     *\n     * @param position The new position, in logical or physical pixels.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setPosition(position) {\n        if (!position ||\n            (position.type !== 'Logical' && position.type !== 'Physical')) {\n            throw new Error('the `position` argument must be either a LogicalPosition or a PhysicalPosition instance');\n        }\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'setPosition',\n                        payload: {\n                            type: position.type,\n                            data: {\n                                x: position.x,\n                                y: position.y\n                            }\n                        }\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Sets the window fullscreen state.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.setFullscreen(true);\n     * ```\n     *\n     * @param fullscreen Whether the window should go to fullscreen or not.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setFullscreen(fullscreen) {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'setFullscreen',\n                        payload: fullscreen\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Bring the window to front and focus.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.setFocus();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setFocus() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'setFocus'\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Sets the window icon.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.setIcon('/tauri/awesome.png');\n     * ```\n     *\n     * Note that you need the `icon-ico` or `icon-png` Cargo features to use this API.\n     * To enable it, change your Cargo.toml file:\n     * ```toml\n     * [dependencies]\n     * tauri = { version = \"...\", features = [\"...\", \"icon-png\"] }\n     * ```\n     *\n     * @param icon Icon bytes or path to the icon file.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setIcon(icon) {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'setIcon',\n                        payload: {\n                            // correctly serialize Uint8Arrays\n                            icon: typeof icon === 'string' ? icon : Array.from(icon)\n                        }\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Whether the window icon should be hidden from the taskbar or not.\n     *\n     * #### Platform-specific\n     *\n     * - **macOS:** Unsupported.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.setSkipTaskbar(true);\n     * ```\n     *\n     * @param skip true to hide window icon, false to show it.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setSkipTaskbar(skip) {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'setSkipTaskbar',\n                        payload: skip\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Grabs the cursor, preventing it from leaving the window.\n     *\n     * There's no guarantee that the cursor will be hidden. You should\n     * hide it by yourself if you want so.\n     *\n     * #### Platform-specific\n     *\n     * - **Linux:** Unsupported.\n     * - **macOS:** This locks the cursor in a fixed location, which looks visually awkward.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.setCursorGrab(true);\n     * ```\n     *\n     * @param grab `true` to grab the cursor icon, `false` to release it.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setCursorGrab(grab) {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'setCursorGrab',\n                        payload: grab\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Modifies the cursor's visibility.\n     *\n     * #### Platform-specific\n     *\n     * - **Windows:** The cursor is only hidden within the confines of the window.\n     * - **macOS:** The cursor is hidden as long as the window has input focus, even if the cursor is\n     *   outside of the window.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.setCursorVisible(false);\n     * ```\n     *\n     * @param visible If `false`, this will hide the cursor. If `true`, this will show the cursor.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setCursorVisible(visible) {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'setCursorVisible',\n                        payload: visible\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Modifies the cursor icon of the window.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.setCursorIcon('help');\n     * ```\n     *\n     * @param icon The new cursor icon.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setCursorIcon(icon) {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'setCursorIcon',\n                        payload: icon\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Changes the position of the cursor in window coordinates.\n     * @example\n     * ```typescript\n     * import { appWindow, LogicalPosition } from '@tauri-apps/api/window';\n     * await appWindow.setCursorPosition(new LogicalPosition(600, 300));\n     * ```\n     *\n     * @param position The new cursor position.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setCursorPosition(position) {\n        if (!position ||\n            (position.type !== 'Logical' && position.type !== 'Physical')) {\n            throw new Error('the `position` argument must be either a LogicalPosition or a PhysicalPosition instance');\n        }\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'setCursorPosition',\n                        payload: {\n                            type: position.type,\n                            data: {\n                                x: position.x,\n                                y: position.y\n                            }\n                        }\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Changes the cursor events behavior.\n     *\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.setIgnoreCursorEvents(true);\n     * ```\n     *\n     * @param ignore `true` to ignore the cursor events; `false` to process them as usual.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setIgnoreCursorEvents(ignore) {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'setIgnoreCursorEvents',\n                        payload: ignore\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Starts dragging the window.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.startDragging();\n     * ```\n     *\n     * @return A promise indicating the success or failure of the operation.\n     */\n    async startDragging() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'startDragging'\n                    }\n                }\n            }\n        });\n    }\n    // Listeners\n    /**\n     * Listen to window resize.\n     *\n     * @example\n     * ```typescript\n     * import { appWindow } from \"@tauri-apps/api/window\";\n     * const unlisten = await appWindow.onResized(({ payload: size }) => {\n     *  console.log('Window resized', size);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     *\n     * @since 1.0.2\n     */\n    async onResized(handler) {\n        return this.listen(TauriEvent.WINDOW_RESIZED, (e) => {\n            e.payload = mapPhysicalSize(e.payload);\n            handler(e);\n        });\n    }\n    /**\n     * Listen to window move.\n     *\n     * @example\n     * ```typescript\n     * import { appWindow } from \"@tauri-apps/api/window\";\n     * const unlisten = await appWindow.onMoved(({ payload: position }) => {\n     *  console.log('Window moved', position);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     *\n     * @since 1.0.2\n     */\n    async onMoved(handler) {\n        return this.listen(TauriEvent.WINDOW_MOVED, (e) => {\n            e.payload = mapPhysicalPosition(e.payload);\n            handler(e);\n        });\n    }\n    /**\n     * Listen to window close requested. Emitted when the user requests to closes the window.\n     *\n     * @example\n     * ```typescript\n     * import { appWindow } from \"@tauri-apps/api/window\";\n     * import { confirm } from '@tauri-apps/api/dialog';\n     * const unlisten = await appWindow.onCloseRequested(async (event) => {\n     *   const confirmed = await confirm('Are you sure?');\n     *   if (!confirmed) {\n     *     // user did not confirm closing the window; let's prevent it\n     *     event.preventDefault();\n     *   }\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     *\n     * @since 1.0.2\n     */\n    /* eslint-disable @typescript-eslint/promise-function-async */\n    async onCloseRequested(handler) {\n        return this.listen(TauriEvent.WINDOW_CLOSE_REQUESTED, (event) => {\n            const evt = new CloseRequestedEvent(event);\n            void Promise.resolve(handler(evt)).then(() => {\n                if (!evt.isPreventDefault()) {\n                    return this.close();\n                }\n            });\n        });\n    }\n    /* eslint-enable */\n    /**\n     * Listen to window focus change.\n     *\n     * @example\n     * ```typescript\n     * import { appWindow } from \"@tauri-apps/api/window\";\n     * const unlisten = await appWindow.onFocusChanged(({ payload: focused }) => {\n     *  console.log('Focus changed, window is focused? ' + focused);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     *\n     * @since 1.0.2\n     */\n    async onFocusChanged(handler) {\n        const unlistenFocus = await this.listen(TauriEvent.WINDOW_FOCUS, (event) => {\n            handler({ ...event, payload: true });\n        });\n        const unlistenBlur = await this.listen(TauriEvent.WINDOW_BLUR, (event) => {\n            handler({ ...event, payload: false });\n        });\n        return () => {\n            unlistenFocus();\n            unlistenBlur();\n        };\n    }\n    /**\n     * Listen to window scale change. Emitted when the window's scale factor has changed.\n     * The following user actions can cause DPI changes:\n     * - Changing the display's resolution.\n     * - Changing the display's scale factor (e.g. in Control Panel on Windows).\n     * - Moving the window to a display with a different scale factor.\n     *\n     * @example\n     * ```typescript\n     * import { appWindow } from \"@tauri-apps/api/window\";\n     * const unlisten = await appWindow.onScaleChanged(({ payload }) => {\n     *  console.log('Scale changed', payload.scaleFactor, payload.size);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     *\n     * @since 1.0.2\n     */\n    async onScaleChanged(handler) {\n        return this.listen(TauriEvent.WINDOW_SCALE_FACTOR_CHANGED, handler);\n    }\n    /**\n     * Listen to the window menu item click. The payload is the item id.\n     *\n     * @example\n     * ```typescript\n     * import { appWindow } from \"@tauri-apps/api/window\";\n     * const unlisten = await appWindow.onMenuClicked(({ payload: menuId }) => {\n     *  console.log('Menu clicked: ' + menuId);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     *\n     * @since 1.0.2\n     */\n    async onMenuClicked(handler) {\n        return this.listen(TauriEvent.MENU, handler);\n    }\n    /**\n     * Listen to a file drop event.\n     * The listener is triggered when the user hovers the selected files on the window,\n     * drops the files or cancels the operation.\n     *\n     * @example\n     * ```typescript\n     * import { appWindow } from \"@tauri-apps/api/window\";\n     * const unlisten = await appWindow.onFileDropEvent((event) => {\n     *  if (event.payload.type === 'hover') {\n     *    console.log('User hovering', event.payload.paths);\n     *  } else if (event.payload.type === 'drop') {\n     *    console.log('User dropped', event.payload.paths);\n     *  } else {\n     *    console.log('File drop cancelled');\n     *  }\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     *\n     * @since 1.0.2\n     */\n    async onFileDropEvent(handler) {\n        const unlistenFileDrop = await this.listen(TauriEvent.WINDOW_FILE_DROP, (event) => {\n            handler({ ...event, payload: { type: 'drop', paths: event.payload } });\n        });\n        const unlistenFileHover = await this.listen(TauriEvent.WINDOW_FILE_DROP_HOVER, (event) => {\n            handler({ ...event, payload: { type: 'hover', paths: event.payload } });\n        });\n        const unlistenCancel = await this.listen(TauriEvent.WINDOW_FILE_DROP_CANCELLED, (event) => {\n            handler({ ...event, payload: { type: 'cancel' } });\n        });\n        return () => {\n            unlistenFileDrop();\n            unlistenFileHover();\n            unlistenCancel();\n        };\n    }\n    /**\n     * Listen to the system theme change.\n     *\n     * @example\n     * ```typescript\n     * import { appWindow } from \"@tauri-apps/api/window\";\n     * const unlisten = await appWindow.onThemeChanged(({ payload: theme }) => {\n     *  console.log('New theme: ' + theme);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     *\n     * @since 1.0.2\n     */\n    async onThemeChanged(handler) {\n        return this.listen(TauriEvent.WINDOW_THEME_CHANGED, handler);\n    }\n}\n/**\n * @since 1.0.2\n */\nclass CloseRequestedEvent {\n    constructor(event) {\n        this._preventDefault = false;\n        this.event = event.event;\n        this.windowLabel = event.windowLabel;\n        this.id = event.id;\n    }\n    preventDefault() {\n        this._preventDefault = true;\n    }\n    isPreventDefault() {\n        return this._preventDefault;\n    }\n}\n/**\n * Create new webview windows and get a handle to existing ones.\n *\n * Windows are identified by a *label*  a unique identifier that can be used to reference it later.\n * It may only contain alphanumeric characters `a-zA-Z` plus the following special characters `-`, `/`, `:` and `_`.\n *\n * @example\n * ```typescript\n * // loading embedded asset:\n * const webview = new WebviewWindow('theUniqueLabel', {\n *   url: 'path/to/page.html'\n * });\n * // alternatively, load a remote URL:\n * const webview = new WebviewWindow('theUniqueLabel', {\n *   url: 'https://github.com/tauri-apps/tauri'\n * });\n *\n * webview.once('tauri://created', function () {\n *  // webview window successfully created\n * });\n * webview.once('tauri://error', function (e) {\n *  // an error happened creating the webview window\n * });\n *\n * // emit an event to the backend\n * await webview.emit(\"some event\", \"data\");\n * // listen to an event from the backend\n * const unlisten = await webview.listen(\"event name\", e => {});\n * unlisten();\n * ```\n *\n * @since 1.0.2\n */\nclass WebviewWindow extends WindowManager {\n    /**\n     * Creates a new WebviewWindow.\n     * @example\n     * ```typescript\n     * import { WebviewWindow } from '@tauri-apps/api/window';\n     * const webview = new WebviewWindow('my-label', {\n     *   url: 'https://github.com/tauri-apps/tauri'\n     * });\n     * webview.once('tauri://created', function () {\n     *  // webview window successfully created\n     * });\n     * webview.once('tauri://error', function (e) {\n     *  // an error happened creating the webview window\n     * });\n     * ```\n     *\n     * * @param label The unique webview window label. Must be alphanumeric: `a-zA-Z-/:_`.\n     * @returns The WebviewWindow instance to communicate with the webview.\n     */\n    constructor(label, options = {}) {\n        super(label);\n        // @ts-expect-error `skip` is not a public API so it is not defined in WindowOptions\n        if (!options?.skip) {\n            invokeTauriCommand({\n                __tauriModule: 'Window',\n                message: {\n                    cmd: 'createWebview',\n                    data: {\n                        options: {\n                            label,\n                            ...options\n                        }\n                    }\n                }\n            })\n                .then(async () => this.emit('tauri://created'))\n                .catch(async (e) => this.emit('tauri://error', e));\n        }\n    }\n    /**\n     * Gets the WebviewWindow for the webview associated with the given label.\n     * @example\n     * ```typescript\n     * import { WebviewWindow } from '@tauri-apps/api/window';\n     * const mainWindow = WebviewWindow.getByLabel('main');\n     * ```\n     *\n     * @param label The webview window label.\n     * @returns The WebviewWindow instance to communicate with the webview or null if the webview doesn't exist.\n     */\n    static getByLabel(label) {\n        if (getAll().some((w) => w.label === label)) {\n            // @ts-expect-error `skip` is not defined in the public API but it is handled by the constructor\n            return new WebviewWindow(label, { skip: true });\n        }\n        return null;\n    }\n    /**\n     *  Gets the focused window.\n     * @example\n     * ```typescript\n     * import { WebviewWindow } from '@tauri-apps/api/window';\n     * const focusedWindow = WebviewWindow.getFocusedWindow();\n     * ```\n     *\n     * @returns The WebviewWindow instance to communicate with the webview or `undefined` if there is not any focused window.\n     *\n     * @since 1.4\n     */\n    static async getFocusedWindow() {\n        for (const w of getAll()) {\n            if (await w.isFocused()) {\n                return w;\n            }\n        }\n        return null;\n    }\n}\n/** The WebviewWindow for the current window. */\nlet appWindow;\nif ('__TAURI_METADATA__' in window) {\n    appWindow = new WebviewWindow(window.__TAURI_METADATA__.__currentWindow.label, {\n        // @ts-expect-error `skip` is not defined in the public API but it is handled by the constructor\n        skip: true\n    });\n}\nelse {\n    console.warn(`Could not find \"window.__TAURI_METADATA__\". The \"appWindow\" value will reference the \"main\" window label.\\nNote that this is not an issue if running this frontend on a browser instead of a Tauri window.`);\n    appWindow = new WebviewWindow('main', {\n        // @ts-expect-error `skip` is not defined in the public API but it is handled by the constructor\n        skip: true\n    });\n}\nfunction mapMonitor(m) {\n    return m === null\n        ? null\n        : {\n            name: m.name,\n            scaleFactor: m.scaleFactor,\n            position: mapPhysicalPosition(m.position),\n            size: mapPhysicalSize(m.size)\n        };\n}\nfunction mapPhysicalPosition(m) {\n    return new PhysicalPosition(m.x, m.y);\n}\nfunction mapPhysicalSize(m) {\n    return new PhysicalSize(m.width, m.height);\n}\n/**\n * Returns the monitor on which the window currently resides.\n * Returns `null` if current monitor can't be detected.\n * @example\n * ```typescript\n * import { currentMonitor } from '@tauri-apps/api/window';\n * const monitor = currentMonitor();\n * ```\n *\n * @since 1.0.0\n */\nasync function currentMonitor() {\n    return invokeTauriCommand({\n        __tauriModule: 'Window',\n        message: {\n            cmd: 'manage',\n            data: {\n                cmd: {\n                    type: 'currentMonitor'\n                }\n            }\n        }\n    }).then(mapMonitor);\n}\n/**\n * Returns the primary monitor of the system.\n * Returns `null` if it can't identify any monitor as a primary one.\n * @example\n * ```typescript\n * import { primaryMonitor } from '@tauri-apps/api/window';\n * const monitor = primaryMonitor();\n * ```\n *\n * @since 1.0.0\n */\nasync function primaryMonitor() {\n    return invokeTauriCommand({\n        __tauriModule: 'Window',\n        message: {\n            cmd: 'manage',\n            data: {\n                cmd: {\n                    type: 'primaryMonitor'\n                }\n            }\n        }\n    }).then(mapMonitor);\n}\n/**\n * Returns the list of all the monitors available on the system.\n * @example\n * ```typescript\n * import { availableMonitors } from '@tauri-apps/api/window';\n * const monitors = availableMonitors();\n * ```\n *\n * @since 1.0.0\n */\nasync function availableMonitors() {\n    return invokeTauriCommand({\n        __tauriModule: 'Window',\n        message: {\n            cmd: 'manage',\n            data: {\n                cmd: {\n                    type: 'availableMonitors'\n                }\n            }\n        }\n    }).then((ms) => ms.map(mapMonitor));\n}\n\nexport { CloseRequestedEvent, LogicalPosition, LogicalSize, PhysicalPosition, PhysicalSize, UserAttentionType, WebviewWindow, WebviewWindowHandle, WindowManager, appWindow, availableMonitors, currentMonitor, getAll, getCurrent, primaryMonitor };\n", "import { isWindows } from './helpers/os-check.js';\nimport { invokeTauriCommand } from './helpers/tauri.js';\n\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * Provides operating system-related utility methods and properties.\n *\n * This package is also accessible with `window.__TAURI__.os` when [`build.withGlobalTauri`](https://tauri.app/v1/api/config/#buildconfig.withglobaltauri) in `tauri.conf.json` is set to `true`.\n *\n * The APIs must be added to [`tauri.allowlist.os`](https://tauri.app/v1/api/config/#allowlistconfig.os) in `tauri.conf.json`:\n * ```json\n * {\n *   \"tauri\": {\n *     \"allowlist\": {\n *       \"os\": {\n *         \"all\": true, // enable all Os APIs\n *       }\n *     }\n *   }\n * }\n * ```\n * It is recommended to allowlist only the APIs you use for optimal bundle size and security.\n * @module\n */\n/**\n * The operating system-specific end-of-line marker.\n * - `\\n` on POSIX\n * - `\\r\\n` on Windows\n *\n * @since 1.0.0\n * */\nconst EOL = isWindows() ? '\\r\\n' : '\\n';\n/**\n * Returns a string identifying the operating system platform.\n * The value is set at compile time. Possible values are `'linux'`, `'darwin'`, `'ios'`, `'freebsd'`, `'dragonfly'`, `'netbsd'`, `'openbsd'`, `'solaris'`, `'android'`, `'win32'`\n * @example\n * ```typescript\n * import { platform } from '@tauri-apps/api/os';\n * const platformName = await platform();\n * ```\n *\n * @since 1.0.0\n *\n */\nasync function platform() {\n    return invokeTauriCommand({\n        __tauriModule: 'Os',\n        message: {\n            cmd: 'platform'\n        }\n    });\n}\n/**\n * Returns a string identifying the kernel version.\n * @example\n * ```typescript\n * import { version } from '@tauri-apps/api/os';\n * const osVersion = await version();\n * ```\n *\n * @since 1.0.0\n */\nasync function version() {\n    return invokeTauriCommand({\n        __tauriModule: 'Os',\n        message: {\n            cmd: 'version'\n        }\n    });\n}\n/**\n * Returns `'Linux'` on Linux, `'Darwin'` on macOS, and `'Windows_NT'` on Windows.\n * @example\n * ```typescript\n * import { type } from '@tauri-apps/api/os';\n * const osType = await type();\n * ```\n *\n * @since 1.0.0\n */\nasync function type() {\n    return invokeTauriCommand({\n        __tauriModule: 'Os',\n        message: {\n            cmd: 'osType'\n        }\n    });\n}\n/**\n * Returns the operating system CPU architecture for which the tauri app was compiled.\n * Possible values are `'x86'`, `'x86_64'`, `'arm'`, `'aarch64'`, `'mips'`, `'mips64'`, `'powerpc'`, `'powerpc64'`, `'riscv64'`, `'s390x'`, `'sparc64'`.\n * @example\n * ```typescript\n * import { arch } from '@tauri-apps/api/os';\n * const archName = await arch();\n * ```\n *\n * @since 1.0.0\n */\nasync function arch() {\n    return invokeTauriCommand({\n        __tauriModule: 'Os',\n        message: {\n            cmd: 'arch'\n        }\n    });\n}\n/**\n * Returns the operating system's default directory for temporary files as a string.\n * @example\n * ```typescript\n * import { tempdir } from '@tauri-apps/api/os';\n * const tempdirPath = await tempdir();\n * ```\n *\n * @since 1.0.0\n */\nasync function tempdir() {\n    return invokeTauriCommand({\n        __tauriModule: 'Os',\n        message: {\n            cmd: 'tempdir'\n        }\n    });\n}\n/**\n * Returns a String with a `BCP-47` language tag inside. If the locale couldn’t be obtained, `null` is returned instead.\n * @example\n * ```typescript\n * import { locale } from '@tauri-apps/api/os';\n * const locale = await locale();\n * if (locale) {\n *    // use the locale string here\n * }\n * ```\n *\n * @since 1.4.0\n */\nasync function locale() {\n    return invokeTauriCommand({\n        __tauriModule: 'Os',\n        message: {\n            cmd: 'locale'\n        }\n    });\n}\n\nexport { EOL, arch, locale, platform, tempdir, type, version };\n", "import * as app from './app.js';\nexport { app };\nimport * as cli from './cli.js';\nexport { cli };\nimport * as clipboard from './clipboard.js';\nexport { clipboard };\nimport * as dialog from './dialog.js';\nexport { dialog };\nimport * as event from './event.js';\nexport { event };\nimport * as fs from './fs.js';\nexport { fs };\nimport * as globalShortcut from './globalShortcut.js';\nexport { globalShortcut };\nimport * as http from './http.js';\nexport { http };\nimport * as notification from './notification.js';\nexport { notification };\nimport * as path from './path.js';\nexport { path };\nimport * as process from './process.js';\nexport { process };\nimport * as shell from './shell.js';\nexport { shell };\nimport { invoke as invoke$1 } from './tauri.js';\nimport * as tauri from './tauri.js';\nexport { tauri };\nimport * as updater from './updater.js';\nexport { updater };\nimport * as window from './window.js';\nexport { window };\nimport * as os from './os.js';\nexport { os };\n\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * The Tauri API allows you to interface with the backend layer.\n *\n * This module exposes all other modules as an object where the key is the module name, and the value is the module exports.\n * @example\n * ```typescript\n * import { app, dialog, event, fs, globalShortcut } from '@tauri-apps/api'\n * ```\n * @module\n */\n/** @ignore */\nconst invoke = invoke$1;\n\nexport { invoke };\n"],
  "mappings": "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",
  "names": ["once", "resolve", "message", "emit", "listen", "once", "TauriEvent", "listen", "once", "emit", "BaseDirectory", "ResponseType", "type", "open", "resolve", "open", "listen", "resolve", "emit", "once", "UserAttentionType", "invoke"]
}
